@page "/"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<style>
    /* Container styling */
.container {
    margin: 20px auto;
    padding: 20px;
    max-width: 1200px;
    background-color: #f8f9fa;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

/* Row styling for product grid */
.row {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
}

/* Individual product card styling */
.col-md-4 {
    flex: 0 0 30%;
    margin-bottom: 20px;
}

.stuff {
    padding: 15px;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

    .stuff:hover {
        transform: translateY(-5px);
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15);
    }

/* Product name button styling */
button.btn {
    background-color: #17a2b8;
    color: #ffffff;
    border: none;
    padding: 10px;
    font-size: 1.2em;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

    button.btn:hover {
        background-color: #138496;
    }

/* Product image styling */
img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 10px;
    margin-bottom: 15px;
}

/* Price and stock information styling */
div {
    font-size: 1em;
    margin-bottom: 15px;
}

    div span {
        font-weight: bold;
        font-size: 1.1em;
    }

/* Add to Cart button styling */
button.add-to-cart {
    background-color: #ffc107;
    color: #212529;
    border: none;
    padding: 10px;
    font-size: 1em;
    border-radius: 5px;
    cursor: pointer;
    width: 100%;
    transition: background-color 0.3s ease;
}

    button.add-to-cart:hover {
        background-color: #e0a800;
    }

    /* Remove from Cart button styling */
    button.add-to-cart[style*='background-color:#ffd800;'] {
        background-color: #dc3545 !important;
        color: #ffffff;
    }

        button.add-to-cart[style*='background-color:#ffd800;']:hover {
            background-color: #c82333 !important;
        }

/* Loading and no products available message styling */
span {
    display: block;
    text-align: center;
    margin-top: 50px;
    font-size: 1.5em;
    color: #6c757d;
}

/* Custom close button styling */
.custom-close {
    background-color: transparent;
    border: none;
    font-size: 1.5rem;
    color: #000;
    opacity: 1;
    cursor: pointer;
    padding: 0;
    outline: none;
    transition: color 0.3s ease, transform 0.3s ease;
}

    .custom-close:hover {
        color: #ff0000;
        transform: scale(1.2);
    }

    .custom-close span {
        font-weight: bold;
        display: block;
        line-height: 1;
        text-align: center;
        width: 100%;
    }

/* User info styling */
.user-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: transparent;
}

.welcome-text {
    margin: 0;
    font-weight: bold;
    color: #333;
    font-size: 16px;
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.logout-button {
    display: flex;
    align-items: center;
    padding: 8px 16px;
    background-color: transparent;
    color: black;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 10px;
    font-size: 14px;
    white-space: nowrap;
}

    .logout-button i {
        margin-right: 8px;
    }

/* Cart container and cart icon styling */
.cart-container {
    display: flex;
    align-items: center;
}

.cart-link {
    display: flex;
    align-items: center;
    position: relative;
    font-size: 26px;
    color: green;
    margin-top: 10px;
}

.cart-count {
    font-size: 20px;
    font-weight: bold;
    position: absolute;
    color: darkorange;
    min-width: 30px;
    top: -20px;
}

/* General Modal Styles */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    width: 90%;
    max-width: 500px;
    padding: 20px;
    background-color: white;
    border-radius: 10px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header h5 {
    margin: 0;
    font-size: 1.2rem;
}

.modal-body {
    margin: 20px 0;
    font-size: 1rem;
}

.modal-footer {
    display: flex;
    justify-content: space-between;
}

    .modal-footer .btn {
        width: 45%;
        font-size: 1rem;
    }

/* Custom Close Button Styles */
.custom-close {
    background-color: transparent;
    border: none;
    font-size: 1.5rem;
    color: #000;
    cursor: pointer;
}

.custom-close:hover {
    color: #ff0000;
    transform: scale(1.2);
}

.search-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 10px;
    margin-bottom: -15px;
}

.search-input {
    flex: 1;
    font-size: 16px;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #ccc; 
    background-color: white; 
    color: black;
    height: 42px;
    outline: none;
    box-shadow: none; 
}

    .search-input:focus {
        border-color: #ccc; 
        outline: none; 
        box-shadow: none; 
    }

.search-button {
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 4px;
    background-color: white; 
    color: black; 
    border: 1px solid #ccc; 
    cursor: pointer;
    height: 42px;
    width: 42px;
    display: flex;
    align-items: center;
    justify-content: center;
}

    .search-button i {
        font-size: 16px;
    }

    .search-button:hover,
    .search-input:hover {
        background-color: #f0f0f0;
        border-color: #bbb;
    }

    .search-container {
        flex-direction: row;
    }

    .search-button {
        padding: 10px;
        width: auto;
        height: 42px;
    }

    .filter-container {
        display: flex;
    }

    .filter-select {
        flex:1;
        padding: 10px;
        border-radius: 10px;
    }

    /* Dropdown styling to match the width of the filter-select container */
    .custom-select {
        width: 100%;
        border-radius: 5px;
        border: 1px solid #ccc;
        box-shadow: none;
        outline: none;
        text-align: center; /* Center the text inside the dropdown */
        appearance: none; /* Remove default appearance for consistency */
    }

        /* Focus state for the dropdown */
        .custom-select:focus {
            outline: none;
            box-shadow: none;
        }

</style>

<div class="user-info">
    @if (IsUserLoggedIn)
    {
        <p class="welcome-text">Welcome, @user.Name!</p>

        @if (user.Roles == 1)
        {
            <button class="admin-button" @onclick="NavigateToAdminPanel">
                <i class="fa fa-cog"></i> Admin
            </button>
        }

        <button class="logout-button" @onclick="@Logout">
            <i class="fa fa-sign-out"></i>Logout
        </button>

        <div class="cart-container">
            <a href="/mycart" class="cart-link">
                <i class="fa fa-shopping-cart">
                    <span class="cart-count"><sup>@cartCount</sup></span>
                </i>
            </a>
        </div>
    }
    else
    {
        <p class="welcome-text">Welcome</p>
        <button class="logout-button" @onclick="@Login"><i class="fa fa-sign-in"></i>Login</button>
    }
</div>

<div class="search-container">
    <input type="text" class="form-control search-input" placeholder="Search product..." @bind="searchTerm" />
    <button type="button" class="search-button" @onclick="FilterProducts">
        <i class="fa fa-search" aria-hidden="true"></i>
    </button>
</div>

<div class="filter-container">
    <!-- Category Filter -->
<div class="form-group filter-select">
    @if (categories != null)
    {
        <select class="form-control custom-select" @onchange="@CategoryClicked">
                <option value="0">Category</option>
            @foreach (var cat in categories)
            {
                <option value="@cat.Id">@cat.Name</option>
            }
        </select>
    }
</div>
    <!-- Price Filter -->
<div class="form-group filter-select">
    <select class="form-control custom-select" @onchange="@SortByPrice">
        <option value="0">Price</option>
        <option value="1">Low - High</option>
        <option value="2">High - Low</option>
    </select>
</div>
</div>


@if (filteredProducts == null)
{
    <span>Loading...</span>
}
else if (filteredProducts.Count == 0)
{
    <span>No products available</span>
}
else
{
    <div class="column content">
        <div class="container">
            <div class="row">
                @foreach (var prod in filteredProducts)
                {
                    <div class="col-md-4">
                        <div class="col-md-12 stuff">
                            <div style="width: 100%; border-radius: 2px; background-color: white;">
                                <button type="button" class="btn" style="border:2px inset #cff7f9; width: 100%;" @onclick="(() => OpenProductModal(prod))">
                                    @prod.Name
                                </button>
                                <img src=@prod.ImageUrl style="width:100%; height:50%;border-radius:1px;" />
                                <div>
                                    Price:&nbsp;$@prod.Price &nbsp;&nbsp;<span style="color:red;"> Stock:&nbsp;@prod.Stock</span>
                                </div>
                                @if (prod.CartFlag)
                                {
                                    <button type="button" class="btn add-to-cart" style="background-color:#ffd800;" @onclick="(()=> AddToCart_Click(prod))">Remove Form Cart</button>
                                }
                                else
                                {
                                    <button type="button" class="btn add-to-cart" @onclick="(()=> AddToCart_Click(prod))">Add To Cart</button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (showProductModal)
{
    <div class="modal" tabindex="-1" role="dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedProduct.Name</h5>
                    <button type="button" class="close custom-close" @onclick="CloseProductModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <img src="@selectedProduct.ImageUrl" style="width:100%; height:auto;" />
                    <p><strong>Price:</strong> $@selectedProduct.Price</p>
                    <p><strong>Stock:</strong> @selectedProduct.Stock</p>
                    <p><strong>Category:</strong> @selectedProduct.CategoryName</p>
                    <p><strong>Description:</strong> @selectedProduct.Description</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseProductModal">Close</button>
                    @if (selectedProduct.CartFlag)
                    {
                        <button type="button" class="btn btn-warning" @onclick="(() => AddToCart_Click(selectedProduct))">Remove from Cart</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary" @onclick="(() => AddToCart_Click(selectedProduct))">Add to Cart</button>
                    }
                </div>
            </div>
    </div>
}

@if (showLoginModal)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login Required</h5>
                <button type="button" class="close custom-close" @onclick="CloseLoginModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>You need to login to add items to your cart. Do you want to log in now?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="ConfirmLogin">Yes, log in</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseLoginModal">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public List<ProductModel> products { get; set; }
    public bool IsUserLoggedIn = false;
    private UserModel user;
    public bool cartFlag = false;
    public bool showProductModal = false;
    public ProductModel selectedProduct { get; set; }
    private bool showLoginModal = false;
    public List<CartModel> myCart { get; set; }
    public int cartCount = 0;
    public List<ProductModel> filteredProducts { get; set; } 
    public string searchTerm { get; set; } = string.Empty; 
    public List<CategoryModel> categories { get; set; } 
    public int selectedCategoryId { get; set; }
    private int selectedSortOption = 0; // 0 = Default, 1 = Low to High, 2 = High to Low

    protected override async Task OnInitializedAsync()
    {
        products = await webShopAppService.GetProductsAsync();
        categories = await webShopAppService.GetCategoriesAsync(); // Fetch categories
        await UpdateCartText(); 
        filteredProducts = products; // Initialize with all products
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();

            var userJson = await SecureStorage.Default.GetAsync("User");
            if (!string.IsNullOrEmpty(userJson))
            {
                user = JsonConvert.DeserializeObject<UserModel>(userJson);
                IsUserLoggedIn = true;
                await LoadCartData(); // Load cart data and update cart count
                StateHasChanged();
            }
            else
            {
                navManager.NavigateTo("/");
            }
        }
    }

    private async Task LoadCartData()
    {
        var cartJson = await SecureStorage.Default.GetAsync("myCart");
        if (!string.IsNullOrEmpty(cartJson))
        {
            myCart = JsonConvert.DeserializeObject<List<CartModel>>(cartJson);
            cartCount = myCart.Count;
        }
        else
        {
            cartCount = 0;
        }
        StateHasChanged();
    }

    private void OpenProductModal(ProductModel product)
    {
        selectedProduct = product;
        showProductModal = true;
    }

    private void CloseProductModal()
    {
        showProductModal = false;
    }
    
    private async Task AddToCart_Click(ProductModel productClicked)
    {
        if (!IsUserLoggedIn)
        {
            showLoginModal = true;
            StateHasChanged();
            return;
        }
        var cartJson = await SecureStorage.Default.GetAsync("myCart");
        myCart = string.IsNullOrEmpty(cartJson) ? new List<CartModel>() : JsonConvert.DeserializeObject<List<CartModel>>(cartJson);

        if (productClicked.CartFlag)
        {
            var existingProduct = myCart.FirstOrDefault(x => x.ProductId == productClicked.Id);
            if (existingProduct != null)
            {
                myCart.Remove(existingProduct);
                cartCount--; // Decrement cart count
            }
        }
        else
        {
            var cartItem = new CartModel
                {
                    ProductId = productClicked.Id,
                    Quantity = 1,
                    AvailableStock = productClicked.Stock,
                    ProductName = productClicked.Name,
                    ProductImage = productClicked.ImageUrl,
                    Price = Convert.ToInt32(productClicked.Price)
                };
            myCart.Add(cartItem);
            cartCount++; // Increment cart count
        }

        // Save updated cart to secure storage
        await SecureStorage.Default.SetAsync("myCart", JsonConvert.SerializeObject(myCart));
        await UpdateCartText(); 
        await notify.InvokeAsync(); 
        StateHasChanged(); 
    }

    private async Task UpdateCartText()
    {
        var cartJson = await SecureStorage.Default.GetAsync("myCart");
        if (!string.IsNullOrEmpty(cartJson))
        {
            myCart = JsonConvert.DeserializeObject<List<CartModel>>(cartJson);
            cartCount = myCart.Count; // Ensure cart count is correct

            // Reset CartFlag for all products
            foreach (var product in products)
            {
                product.CartFlag = false;
            }

            // Set CartFlag to true for products that are in the cart
            foreach (var cartItem in myCart)
            {
                var cartProduct = products.FirstOrDefault(x => x.Id == cartItem.ProductId);
                if (cartProduct != null)
                {
                    cartProduct.CartFlag = true;
                }
            }
        }
        else
        {
            cartCount = 0; // Reset cart count if no items are in the cart
            foreach (var product in products)
            {
                product.CartFlag = false;
            }
        }

        StateHasChanged(); // Trigger UI refresh
    }

    private void CloseLoginModal()
    {
        showLoginModal = false;
        StateHasChanged();
    }

    private void ConfirmLogin()
    {
        showLoginModal = false;
        navManager.NavigateTo("/login");
    } 

    private void Logout()
    {
        SecureStorage.RemoveAll();
        navManager.NavigateTo("/login");
    }

    private void Login()
    {
        navManager.NavigateTo("/login");
    }

    private void NavigateToAdminPanel()
    {
        navManager.NavigateTo("/admin");
    }

    private void CategoryClicked(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();

        if (int.TryParse(selectedValue, out var categoryId))
        {
            selectedCategoryId = categoryId;

            if (selectedCategoryId == 0)
            {
                filteredProducts = products;
            }
            else
            {
                filteredProducts = products.Where(p => p.CategoryId == selectedCategoryId).ToList();
            }
        }
        else
        {
            filteredProducts = products;
        }

        StateHasChanged(); // Trigger UI update
    }

    private void FilterProducts()
    {
        string searchText = searchTerm?.ToLower() ?? string.Empty;
        filteredProducts = products
            .Where(p => p.Name.ToLower().Contains(searchText))
            .ToList();
        StateHasChanged(); 
    }

    private void SortByPrice(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();

        if (int.TryParse(selectedValue, out var sortOption))
        {
            selectedSortOption = sortOption;

            if (selectedSortOption == 0)
            {
                filteredProducts = products.ToList();
            }
            else if (selectedSortOption == 1)
            {
                filteredProducts = filteredProducts.OrderBy(p => p.Price).ToList();
            }
            else if (selectedSortOption == 2)
            {
                filteredProducts = filteredProducts.OrderByDescending(p => p.Price).ToList();
            }
        }
        else
        {
            filteredProducts = products.ToList();
        }
        StateHasChanged(); 
    }
}

@page "/"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<div class="user-info">
    @if (IsUserLoggedIn)
    {
        <p class="welcome-text">Welcome, @user.Name!</p>
        <button class="logout-button" @onclick="@Logout">
            <i class="fa fa-sign-out"></i>Logout
        </button>

        <div class="cart-container">
            <a href="/mycart" class="cart-link">
                <i class="fa fa-shopping-cart">
                    <span class="cart-count"><sup>@cartCount</sup></span>
                </i>
            </a>
        </div>
    }
    else
    {
        <p class="welcome-text">Welcome</p>
        <button class="logout-button" @onclick="@Login"><i class="fa fa-sign-in"></i>Login</button>
    }
</div>

@if (products == null)
{
    <span>Loading...</span>
}
else if (products.Count == 0)
{
    <span>No products available</span>
}
else
{
    <div class="column content">
        <div class="container">
            <div class="row">
                @foreach (var prod in products)
                {
                    <div class="col-md-4">
                        <div class="col-md-12 stuff">
                            <div style="width: 100%; border-radius: 2px; background-color: white;">
                                <button type="button" class="btn" style="border:2px inset #cff7f9; width: 100%;" @onclick="(() => OpenProductModal(prod))">
                                    @prod.Name
                                </button>
                                <img src=@prod.ImageUrl style="width:100%; height:50%;border-radius:1px;" />
                                <div>
                                    Price:&nbsp;$@prod.Price &nbsp;&nbsp;<span style="color:red;"> Stock:&nbsp;@prod.Stock</span>
                                </div>
                                @if (prod.CartFlag)
                                {
                                    <button type="button" class="btn add-to-cart" style="background-color:#ffd800;" @onclick="(()=> AddToCart_Click(prod))">Remove Form Cart</button>
                                }
                                else
                                {
                                    <button type="button" class="btn add-to-cart" @onclick="(()=> AddToCart_Click(prod))">Add To Cart</button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (showProductModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedProduct.Name</h5>
                    <button type="button" class="close custom-close" @onclick="CloseProductModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <img src="@selectedProduct.ImageUrl" style="width:100%; height:auto;" />
                    <p><strong>Price:</strong> $@selectedProduct.Price</p>
                    <p><strong>Stock:</strong> @selectedProduct.Stock</p>
                    <p><strong>Description:</strong> @selectedProduct.Description</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseProductModal">Close</button>
                    @if (selectedProduct.CartFlag)
                    {
                        <button type="button" class="btn btn-warning" @onclick="(() => AddToCart_Click(selectedProduct))">Remove from Cart</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary" @onclick="(() => AddToCart_Click(selectedProduct))">Add to Cart</button>
                    }
                </div>
            </div>
        </div>
    </div>
}


@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public List<ProductModel> products { get; set; }
    public bool IsUserLoggedIn = false;
    private UserModel user;
    public bool cartFlag = false;
    public bool showProductModal = false;
    public ProductModel selectedProduct { get; set; }

    public List<CartModel> myCart { get; set; }
    public int cartCount = 0;

    protected override async Task OnInitializedAsync()
    {
        products = await webShopAppService.GetProductsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();

            var userJson = await SecureStorage.Default.GetAsync("User");
            if (!string.IsNullOrEmpty(userJson))
            {
                user = JsonConvert.DeserializeObject<UserModel>(userJson);
                IsUserLoggedIn = true;
                await LoadCartData(); // Load cart data and update cart count
                StateHasChanged();
            }
            else
            {
                navManager.NavigateTo("/");
            }
        }
    }

    private async Task LoadCartData()
    {
        var cartJson = await SecureStorage.Default.GetAsync("myCart");
        if (!string.IsNullOrEmpty(cartJson))
        {
            myCart = JsonConvert.DeserializeObject<List<CartModel>>(cartJson);
            cartCount = myCart.Count;
        }
        else
        {
            cartCount = 0;
        }
        StateHasChanged();
    }

    private void OpenProductModal(ProductModel product)
    {
        selectedProduct = product;
        showProductModal = true;
    }

    private void CloseProductModal()
    {
        showProductModal = false;
    }

    private async Task AddToCart_Click(ProductModel productClicked)
    {
        var cartJson = await SecureStorage.Default.GetAsync("myCart");
        if (string.IsNullOrEmpty(cartJson))
        {
            myCart = new List<CartModel>();
        }
        else
        {
            myCart = JsonConvert.DeserializeObject<List<CartModel>>(cartJson);
        }

        if (productClicked.CartFlag)
        {
            var existing_product = myCart.FirstOrDefault(x => x.ProductId == productClicked.Id);
            if (existing_product != null)
            {
                myCart.Remove(existing_product);
                cartCount--; // Decrement cart count
                await SecureStorage.Default.SetAsync("myCart", JsonConvert.SerializeObject(myCart));
            }
        }
        else
        {
            CartModel cm = new CartModel
                {
                    ProductId = productClicked.Id,
                    Quantity = 1,
                    AvailableStock = productClicked.Stock,
                    ProductName = productClicked.Name,
                    ProductImage = productClicked.ImageUrl,
                    Price = Convert.ToInt32(productClicked.Price)
                };
            myCart.Add(cm);
            cartCount++; // Increment cart count
            await SecureStorage.Default.SetAsync("myCart", JsonConvert.SerializeObject(myCart));
        }

        await UpdateCartText();
        await notify.InvokeAsync();
        StateHasChanged();
    }

    private async Task UpdateCartText()
    {
        var cartJson = await SecureStorage.Default.GetAsync("myCart");
        if (!string.IsNullOrEmpty(cartJson))
        {
            myCart = JsonConvert.DeserializeObject<List<CartModel>>(cartJson);
            cartCount = myCart.Count; // Ensure cart count is correct

            foreach (var product in products)
            {
                product.CartFlag = false;
            }

            foreach (var cart in myCart)
            {
                var cartProduct = products.FirstOrDefault(x => x.Id == cart.ProductId);
                if (cartProduct != null)
                {
                    cartProduct.CartFlag = true;
                }
            }
        }
        else
        {
            cartCount = 0; // Reset cart count if no items are in the cart
        }
    }

    private void Logout()
    {
        SecureStorage.RemoveAll();
        navManager.NavigateTo("/login");
    }

    private void Login()
    {
        navManager.NavigateTo("/login");
    }
}

@page "/"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<style>
    .container {
      max-width: 1200px;
      background-color: transparent;
      margin-top: 50px;
    }

    .product-header {
        display: flex;
        flex-direction: column;
        width: 100%;
        align-items: center; /* Center elements */
    }

    .header-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        margin-bottom: 20px; 
    }

    /* Logo to the left */
    .logo-image {
        max-height: 50px; 
        width: auto;
    }

    .right {
        display: flex;
        align-items: center;
    }

    .fa-shopping-cart {
        position: relative;
        font-size: 50px;
        color: dimgray;
    }

    .fa-shopping-cart span {
        position: absolute;
        top: -10px;
        right: -10px;
        background-color: coral;
        color: white;
        font-size: 12px;
        border-radius: 50%;
        padding: 4px;
        text-align: center;
    }

    .search-container {
        display: flex;
        align-items: center;
        flex-grow: 1;
        border-radius: 25px;
        overflow: hidden;
        margin-left: 15px;
        margin-right: 15px;
        border: 1px solid lightgray; 
        width: 150px;
        height: 40px;
    }

    .search-input {
        border: none;
        padding: 10px;
        width: 100%;
        font-size: 16px;
        outline: none;
        background-color: white;
        color: dimgrey;
        border-radius: 25px;
        height: 40px;
    }

    .search-input:focus {
        outline: none;
        box-shadow: none;
    }

    .search-button {
        background-color: lightgray;
        border: none;
        padding: 10px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 0 25px 25px 0;
        height: 40px;
    }

    .filter-container {
        display: flex;
        justify-content: flex-start;
        margin-top: -10px;
        margin-left: 40px;
    }

    .filter-select {
        width: 110px; 
        background-color: transparent;
        border-radius: 25px;
        padding: 5px;
    }

    .custom-select {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        background-color: white;
        color: dimgrey;
        border-radius: 25px;
        border: 1px solid lightgray;
    }

    /* Product container */
    .product-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        margin-top: 20px;
        margin-bottom: 10%;
        padding: 0 10px;
    }

    .product-card {
        width: 48%; /* Adjust width to ensure two products per row */
        background-color: white;
        border-radius: 10px;
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        padding: 10px;
        margin-bottom: 20px;
        text-align: left;
    }

    .product-image {
        width: 100%;
        height: auto;
        object-fit: cover;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .product-details {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .product-title {
        font-size: 1.1em;
        font-weight: bold;
        color: #333;
    }

    .product-description {
        font-size: 0.9em;
        color: #666;
    }

    .product-price {
        font-size: 1.2em;
        color: #212529;
        font-weight: bold;
    }

    .product-price-cart {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 10px;
    }

    .product-price-cart .cart-icon i {
        font-size: 22px;
        color: coral;
    }

    /* Modal style */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        padding: 15px; 
        box-sizing: border-box;
    }

    .modal-content {
        width: 100%;
        max-width: 90%; 
        padding: 15px; 
        background-color: white;
        border-radius: 10px; 
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3); 
    }

    .modal-header, .modal-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header {
        border-bottom: 1px solid #f1f1f1;
        padding-bottom: 8px; 
    }

    .modal-body {
        text-align: center;
        padding: 15px 0; 
    }

        .modal-body img {
            max-width: 100%;
            height: auto;
            max-height: 300px; 
            border-radius: 8px; 
            margin-bottom: 15px;
            object-fit: cover;
        }

        .modal-body p {
            font-size: 0.9rem; 
            margin-bottom: 8px;
            color: #333;
        }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 8px; 
        padding-top: 8px;
        border-top: 1px solid #f1f1f1;
    }

    .modal-btn {
        border: none;
        padding: 8px;
        font-size: 0.9em; 
        border-radius: 5px;
        cursor: pointer;
        width: 40%; 
    }

    .confirm {
        background-color: coral;
        color: white;
    }

    .cancel {
        background-color: lightgray;
        color: coral;
    }

    .custom-close {
        background-color: transparent;
        border: none;
        font-size: 1.2rem; 
        color: #000;
        cursor: pointer;
        position: relative;
        top: -10px;
        right: -10px;
    }

    .custom-close:hover {
        color: coral;
        transform: scale(1.2);
    }
</style>

<Header />

<div class="container">
    <div class="product-header">
        <div class="header-content">
            <!-- Logo to the left -->
            <div class="left">
                <img src="/Images/brandlogo.png" alt="Logo" class="logo-image" />
            </div>

            <!-- Search container -->
            <div class="search-container">
                <input type="text" class="form-control search-input" placeholder="Søg ..." @bind="searchTerm" />
                <button type="button" class="search-button" @onclick="FilterProducts">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </button>
            </div>

            <!-- Cart icon to the right -->
            <div class="right">
                @if (IsUserLoggedIn)
                {
                    <a href="/mycart" class="shopping-cart">
                        <i class="fa fa-shopping-cart">
                            <span>@cartCount</span>
                        </i>
                    </a>
                }
            </div>
        </div>

        <!-- Filters container -->
        <div class="filter-container">
            <div class="filter-select">
                @if (categories != null)
                {
                    <select class="custom-select" @onchange="@CategoryClicked">
                        <option value="0">Kategori</option>
                        @foreach (var cat in categories)
                        {
                            <option value="@cat.Id">@cat.Name</option>
                        }
                    </select>
                }
            </div>

            <div class="filter-select">
                <select class="custom-select" @onchange="@SortByPrice">
                    <option value="0">Pris</option>
                    <option value="1">Lav-Høj</option>
                    <option value="2">Høj-Lav</option>
                </select>
            </div>
        </div>
    </div>
</div>

@if (filteredProducts == null)
{
    <span>Indlæser...</span>
}
else if (filteredProducts.Count == 0)
{
    <span>Ingen produkter tilgængelige</span>
}
else
{
    <div class="product-container">
        @foreach (var prod in filteredProducts)
        {
            <div class="product-card">
                <img src="@prod.ImageUrl" alt="@prod.Name" class="product-image" @onclick="(() => OpenProductModal(prod))" />
                        <div class="product-details">
                            <h5 class="product-title">@prod.Name</h5>
                            <p class="product-description">@prod.Description</p>
                            <!-- Flex container for price and cart icon -->
                            <div class="product-price-cart">
                                <div class="price">
                                    <strong>@prod.Price</strong> <span class="currency">Kr</span>
                                </div>
                                <div class="cart-icon">
                                    <i class="fa fa-cart-plus" aria-hidden="true" @onclick="(() => AddToCart_Click(prod))"></i>
                                </div>
                            </div>
                        </div>
            </div>
        }
    </div>
}

@if (showProductModal)
{
    <div class="modal" tabindex="-1" role="dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@selectedProduct.Name</h5>
                <button type="button" class="close custom-close" @onclick="CloseProductModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <img src="@selectedProduct.ImageUrl" alt="@selectedProduct.Name" />
                <p><strong>Pris:</strong> @selectedProduct.Price Kr</p>
                <p><strong>Kategori:</strong> @selectedProduct.CategoryName</p>
                <p><strong>Beskrivelse:</strong> @selectedProduct.Description</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="modal-btn cancel" @onclick="CloseProductModal">Luk</button>
                <button type="button" class="modal-btn confirm" @onclick="(() => AddToCart_Click(selectedProduct))">Læg i kurv</button>
            </div>
        </div>
    </div>
}

@if (showLoginModal)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login påkrævet</h5>
                <button type="button" class="close custom-close" @onclick="CloseLoginModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Du skal logge ind for at tilføje varer til kurven. Vil du logge ind nu?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="modal-btn cancel" @onclick="CloseLoginModal">Nej tak</button>
                <button type="button" class="modal-btn confirm" @onclick="ConfirmLogin">Ja</button>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public List<ProductModel> products { get; set; }
    public bool IsUserLoggedIn = false;
    private UserModel user;
    public bool showProductModal = false;
    public ProductModel selectedProduct { get; set; }
    private bool showLoginModal = false;
    public List<CartModel> myCart { get; set; }
    public int cartCount = 0;
    public List<ProductModel> filteredProducts { get; set; } 
    public string searchTerm { get; set; } = string.Empty; 
    public List<CategoryModel> categories { get; set; } 
    public int selectedCategoryId { get; set; }
    private int selectedSortOption = 0; // 0 = Default, 1 = Low to High, 2 = High to Low

    protected override async Task OnInitializedAsync()
    {
        if (products == null) // Fetch products if not already initialized
        {
            products = await webShopAppService.GetProductsAsync();
        }

        if (categories == null) // Fetch categories if not already initialized
        {
            categories = await webShopAppService.GetCategoriesAsync(); // Fetch categories
        }

        filteredProducts = products; // Initialize with all products
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();

            var userJson = await SecureStorage.Default.GetAsync("User");
            if (!string.IsNullOrEmpty(userJson))
            {
                user = JsonConvert.DeserializeObject<UserModel>(userJson);
                IsUserLoggedIn = true;
                await LoadCartData(); // Load cart data and update cart count
                StateHasChanged();
            }
            else
            {
                IsUserLoggedIn = false;
                navManager.NavigateTo("/");
            }
            await UpdateCartText(); // Ensure cart count is updated
            StateHasChanged();
        }
    }

    private async Task LoadCartData()
    {
        var cartJson = await SecureStorage.Default.GetAsync("myCart");
        if (!string.IsNullOrEmpty(cartJson))
        {
            myCart = JsonConvert.DeserializeObject<List<CartModel>>(cartJson);
            cartCount = myCart.Count;
        }
        else
        {
            cartCount = 0;
        }
        StateHasChanged();
    }

    private void OpenProductModal(ProductModel product)
    {
        selectedProduct = product;
        showProductModal = true;
    }

    private void CloseProductModal()
    {
        showProductModal = false;
    }

    private async Task AddToCart_Click(ProductModel productClicked)
    {
        if (!IsUserLoggedIn)
        {
            showLoginModal = true;
            StateHasChanged();
            return;
        }

        var cartJson = await SecureStorage.Default.GetAsync("myCart");
        if (string.IsNullOrEmpty(cartJson))
        {
            myCart = new List<CartModel>();
        }else
        {
            myCart = string.IsNullOrEmpty(cartJson) ? new List<CartModel>() : JsonConvert.DeserializeObject<List<CartModel>>(cartJson);
        }
     
         var existingProduct = myCart.FirstOrDefault(x => x.ProductId == productClicked.Id);
        if (existingProduct != null)
        {
            existingProduct.Quantity += 1;
        }
        else
        {
            CartModel cm = new CartModel
                {
                    ProductId = productClicked.Id,
                    Quantity = 1,
                    AvailableStock = Convert.ToInt32(productClicked.Stock),
                    ProductName = productClicked.Name,
                    ProductImage = productClicked.ImageUrl,
                    Price = Convert.ToInt32(productClicked.Price)
                };
            myCart.Add(cm);
        }
        // Save updated cart to secure storage
        await SecureStorage.Default.SetAsync("myCart", JsonConvert.SerializeObject(myCart));
        await UpdateCartText();

        cartCount = myCart.Sum(item => item.Quantity); // Calculate total quantity of items in the cart
        await notify.InvokeAsync();
        StateHasChanged();
    }

    private async Task UpdateCartText()
    {
        var cartJson = await SecureStorage.Default.GetAsync("myCart");
        if (!string.IsNullOrEmpty(cartJson))
        {
            myCart = JsonConvert.DeserializeObject<List<CartModel>>(cartJson);
            cartCount = myCart.Sum(item => item.Quantity);  // Update the cart count to reflect the total quantity of items
            StateHasChanged();
        }
    }

    private void CloseLoginModal()
    {
        showLoginModal = false;
        StateHasChanged();
    }

    private void ConfirmLogin()
    {
        showLoginModal = false;
        navManager.NavigateTo("/login");
    } 

    private void CategoryClicked(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();

        if (int.TryParse(selectedValue, out var categoryId))
        {
            selectedCategoryId = categoryId;

            if (selectedCategoryId == 0)
            {
                filteredProducts = products;
            }
            else
            {
                filteredProducts = products.Where(p => p.CategoryId == selectedCategoryId).ToList();
            }
        }
        else
        {
            filteredProducts = products;
        }
        StateHasChanged(); 
    }

    private void FilterProducts()
    {
        string searchText = searchTerm?.ToLower() ?? string.Empty;
        filteredProducts = products.Where(p => p.Name.ToLower().Contains(searchText)).ToList();
        StateHasChanged(); 
    }

    private void SortByPrice(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();

        if (int.TryParse(selectedValue, out var sortOption))
        {
            selectedSortOption = sortOption;

            if (selectedSortOption == 0)
            {
                filteredProducts = products.ToList();
            }
            else if (selectedSortOption == 1)
            {
                filteredProducts = filteredProducts.OrderBy(p => p.Price).ToList();
            }
            else if (selectedSortOption == 2)
            {
                filteredProducts = filteredProducts.OrderByDescending(p => p.Price).ToList();
            }
        }
        else
        {
            filteredProducts = products.ToList();
        }
        StateHasChanged(); 
    }
}

@page "/user"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

@if (user != null)
{
    <div class="clearfix">
        <div class="column menu">
            <div class="vertical-menu">
                <a class="@(myAccountFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("MyAccount"))'>My Account</a>
                <a class="@(changePasswordFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("ChangePassword"))'>Change Password</a>
                <a class="@(orderHistoryFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("OrderHistory"))'>Order History</a>
            </div>
        </div>
        <div class="column content">
            <div>
                <h4>@headerText</h4>
            </div>
            <br />
            @if (myAccountFlag)
            {
                <div>
                    <p><strong>Name:</strong> @user.Name</p>
                    <p><strong>Email:</strong> @user.Email</p>
                    <p><strong>Mobile:</strong> @user.Mobile</p>
                    <p><strong>Address:</strong> @user.Address</p>
                    <button class="btn btn-primary" @onclick="() => EditButtonClick(user)">Edit</button>
                </div>
            }

            @if (changePasswordFlag)
            {
                <div class="form-group">
                    <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword_Click">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Old Password:</label>
                            <InputText type="password" class="form-control" id="oldpwd" @bind-Value="passwordModel.OldPassword" autocomplete="off"></InputText>
                            <ValidationMessage For="@(() => passwordModel.OldPassword)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>New Password:</label>
                            <InputText type="password" class="form-control" id="newpwd" @bind-Value="passwordModel.Password" autocomplete="off"></InputText>
                            <ValidationMessage For="@(() => passwordModel.Password)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Confirm Password:</label>
                            <InputText type="password" class="form-control" id="confirmpwd" @bind-Value="confirmPassword" autocomplete="off"></InputText>
                            <ValidationMessage For="@(() => confirmPassword)"></ValidationMessage>
                        </div>
                        <br />
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </EditForm>
                </div>
            }

            @if (orderHistoryFlag)
            {
                <p>Order History</p>
            }



            @if (showAlertMessage == true)
            {
                <div class="modal">
                    <div class="modal-content">
                        <div class="modal-header">
                            Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
                        </div>
                        <div class="modal-body">
                            @Message
                        </div>
                        <div class="modal-footer">
                            <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <p>No user data found. Please <a href="/login">login</a>.</p>
}

@if (showAlertMessage == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Alert </h5>
                <span class="close" @onclick="ToggleAlertMessage">&times;</span>
            </div>
            <div class="modal-body">
                @alertMessage
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleAlertMessage" />
            </div>
        </div>
    </div>
}

@code {
    private UserModel user;
    private UserModel userToUpdate;
    private bool showEditPopup = false;
    string Message = string.Empty;
    private string headerText = "MyAccount";
    private bool myAccountFlag = true;
    private bool changePasswordFlag = false;
    private bool orderHistoryFlag = false;
    public bool showAlertMessage = false;
    private PasswordModel passwordModel = new PasswordModel();
    private string confirmPassword;
    private string alertMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await ChangeActiveMenu("MyAccount"); // Show MyAccount As a default
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadUserData(); // Reload user data when parameters are set or updated
    }

    private async Task LoadUserData()
    {
        try
        {
            var userJson = await SecureStorage.Default.GetAsync("User");
            if (!string.IsNullOrEmpty(userJson))
            {
                user = JsonConvert.DeserializeObject<UserModel>(userJson);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            navManager.NavigateTo("/login");
        }
    }

    private async Task ChangeActiveMenu(string menu)
    {
        headerText = menu;
        switch (menu)
        {
            case "MyAccount":
                myAccountFlag = true;
                changePasswordFlag = false;
                orderHistoryFlag = false;
                break;

            case "ChangePassword":
                myAccountFlag = false;
                changePasswordFlag = true;
                orderHistoryFlag = false;
                break;

            case "OrderHistory":
                myAccountFlag = false;
                changePasswordFlag = false;
                orderHistoryFlag = true;
                // await GetOrderByUserID(user.Id);
                break;
        }
        StateHasChanged();
    }

    private void ToggleAlertMessage()
    {
        showAlertMessage = !showAlertMessage;
    }

    private void EditButtonClick(UserModel userToUpdate)
    {
        this.userToUpdate = userToUpdate;
        ToggleEditPopup();
    }

    private void ToggleEditPopup()
    {
        showEditPopup = !showEditPopup;
    }

    private async Task UpdateUser()
    {
        var updatedUser = await webShopAppService.UpdateUserAsync(userToUpdate);

        if (updatedUser != null)
        {
            await SecureStorage.Default.SetAsync("User", JsonConvert.SerializeObject(updatedUser)); // Update SecureStorage
            ToggleEditPopup();
            Message = "User Updated Successfully !!";
            ToggleSuccessPopup();
            userToUpdate = new UserModel();
            user = updatedUser;
        }
        else
        {
            Message = "Failed to update user!!";
            ToggleSuccessPopup();
        }
    }

    private void ToggleSuccessPopup()
    {
        showAlertMessage = showAlertMessage == true ? false : true;
    }

    private async Task ChangePassword_Click()
    {
        if (passwordModel.Password != confirmPassword)
        {
            alertMessage = "Password & Confirm Password do not match";
            ToggleAlertMessage();
            return;
        }

        passwordModel.HashedPassword = ComputeSha256Hash(passwordModel.Password);
        passwordModel.OldPassword = ComputeSha256Hash(passwordModel.OldPassword);
        passwordModel.UserId = user.Id;

        try
        {
            var response = await webShopAppService.ChangePassword(passwordModel);
            if (response.IsSuccessStatusCode)
            {
                passwordModel = new PasswordModel();
                confirmPassword = string.Empty;
                alertMessage = "Password changed successfully";
            }
            else
            {
                alertMessage = await response.Content.ReadAsStringAsync(); // Read error message from the response
            }
        }
        catch (Exception ex)
        {
            alertMessage = $"An error occurred: {ex.Message}";
        }
        ToggleAlertMessage();
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}

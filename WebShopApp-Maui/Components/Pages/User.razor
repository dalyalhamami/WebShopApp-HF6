@page "/user"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

@if (user != null)
{
    <div class="clearfix">
        <div class="column menu">
            <div class="vertical-menu">
                <a class="@(myAccountFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("MyAccount"))'>My Account</a>
                <a class="@(changePasswordFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("ChangePassword"))'>Change Password</a>
                <a class="@(orderHistoryFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("OrderHistory"))'>Order History</a>
            </div>
        </div>
        <div class="column content">
            <div>
                <h4>@headerText</h4>
            </div>
            <br />
            @if (myAccountFlag)
            {
                <div>
                    <p><strong>Name:</strong> @user.Name</p>
                    <p><strong>Email:</strong> @user.Email</p>
                    <p><strong>Mobile:</strong> @user.Mobile</p>
                    <p><strong>Address:</strong> @user.Address</p>
                    <button class="btn btn-primary" @onclick="() => EditButtonClick(user)">Edit</button>
                </div>
            }

            @if (changePasswordFlag)
            {
                <div class="form-group">
                    <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword_Click">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Old Password:</label>
                            <InputText type="password" class="form-control" id="oldpwd" @bind-Value="passwordModel.OldPassword" autocomplete="off"></InputText>
                            <ValidationMessage For="@(() => passwordModel.OldPassword)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>New Password:</label>
                            <InputText type="password" class="form-control" id="newpwd" @bind-Value="passwordModel.Password" autocomplete="off"></InputText>
                            <ValidationMessage For="@(() => passwordModel.Password)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Confirm Password:</label>
                            <InputText type="password" class="form-control" id="confirmpwd" @bind-Value="confirmPassword" autocomplete="off"></InputText>
                            <ValidationMessage For="@(() => confirmPassword)"></ValidationMessage>
                        </div>
                        <br />
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </EditForm>
                </div>
            }

            @if (orderHistoryFlag)
            {
                @if (userOrders == null || userOrders.Count == 0)
                {
                    <p>No orders found</p>
                }
                else
                {
                    <table class="table table-striped table-bordered bg-light">
                        <thead>
                            <tr>
                                <th>Order</th>
                                <th>Total</th>
                                <th>Order Date</th>
                                <th style="width:80px;">Track</th>
                                <th style="width:80px;">Details</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ord in userOrders)
                            {
                                <tr>
                                    <td>@ord.OrderId</td>
                                    <td>@ord.Total</td>
                                    <td>@ord.CreatedOn</td>
                                    <td>
                                        <input type="button" class="btn btn-primary" value="Track" @onclick="(() => Track_Click(ord.OrderId))" />
                                    </td>
                                    <td>
                                        <input type="button" class="btn btn-secondary" value="Detail" @onclick="(() => Detail_Click(ord.OrderId))" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            }

            @if (showAlertMessage == true)
            {
                <div class="modal">
                    <div class="modal-content">
                        <div class="modal-header">
                            Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
                        </div>
                        <div class="modal-body">
                            @Message
                        </div>
                        <div class="modal-footer">
                            <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
                        </div>
                    </div>
                </div>
            }

            @if (showEditPopup == true)
            {
                <div class="modal">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5>Edit User</h5>
                            <span class="close" @onclick="ToggleEditPopup">&times;</span>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@userToUpdate" OnValidSubmit="UpdateUser">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                    <label>Name:</label>
                                    <InputText @bind-Value="userToUpdate.Name" class="form-control" />
                                    <ValidationMessage For="@(() => userToUpdate.Name)" />
                                </div>
                                <div class="form-group">
                                    <label>Email:</label>
                                    <InputText @bind-Value="userToUpdate.Email" class="form-control" />
                                    <ValidationMessage For="@(() => userToUpdate.Email)" />
                                </div>
                                <div class="form-group">
                                    <label>Mobile:</label>
                                    <InputText @bind-Value="userToUpdate.Mobile" class="form-control" />
                                    <ValidationMessage For="@(() => userToUpdate.Mobile)" />
                                </div>
                                <div class="form-group">
                                    <label>Address:</label>
                                    <InputText @bind-Value="userToUpdate.Address" class="form-control" />
                                    <ValidationMessage For="@(() => userToUpdate.Address)" />
                                </div>
                                <br />
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary">Save</button>
                                    <button type="button" class="btn btn-secondary" @onclick="ToggleEditPopup">Cancel</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            }

            @if (showOrderDetail == true)
            {
                <div class="modal">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5>Order Details </h5>
                            <span class="close" @onclick="ToggleOrderDetailPopup">&times;</span>
                        </div>
                        <div class="modal-body">
                            @if (myCart != null && myCart.Count > 0)
                            {
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                            <thead>
                                                <tr>
                                                    <th>Product</th>
                                                    <th>Quantity</th>
                                                    <th>Prise</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var cart in myCart)
                                                {
                                                    <tr>
                                                        <td>
                                                            <div class="product-info">
                                                                <div class="product-image">
                                                                    <img src="@cart.ProductImage" alt="Product" />
                                                                </div>
                                                                <div class="product-details">
                                                                    <p>@cart.ProductName</p>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>@cart.Quantity</td>
                                                        <td>$@(cart.Price * cart.Quantity).00</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    <table class="summary-table">
                                        <tr>
                                            <td>Subtotal</td>
                                            <td>$@subTotal.00</td>
                                        </tr>
                                        <tr>
                                            <td>Shipping Charges</td>
                                            <td>$@shippingCharges.00</td>
                                        </tr>
                                        <tr>
                                            <td>Total</td>
                                            <td>$@finalTotal.00</td>
                                        </tr>
                                        <tr>
                                            <td>Shipping Address</td>
                                            <td>@shippingAddress</td>
                                        </tr>
                                        <tr>
                                            <td>Payment Mode</td>
                                            <td>@paymentMode</td>
                                        </tr>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <p>No items found in the order.</p>
                            }
                        </div>
                        <div class="modal-footer">
                            <input type="button" class="btn btn-secondary" value="Close" @onclick="ToggleOrderDetailPopup" />
                        </div>
                    </div>
                </div>
            }

            @if (showTrackOrder == true)
            {
                <div class="modal">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5>Track Order</h5>
                            <span class="close" @onclick="ToggleTrackOrderPopup">&times;</span>
                        </div>
                        <div class="modal-body">
                            @if (shippingStatuses != null && shippingStatuses.Count > 0)
                            {
                                <table>
                                    <tbody>
                                        @foreach (var status in shippingStatuses)
                                        {
                                            <tr>
                                                <td>@status</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <span>No update on order shipping. Please check after some time.</span>
                            }
                        </div>
                        <div class="modal-footer">
                            <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleTrackOrderPopup" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <p>No user data found. Please <a href="/login">login</a>.</p>
}

@code {
    // User Properties
    private UserModel user;
    private UserModel userToUpdate;
    private PasswordModel passwordModel = new PasswordModel();
    private string confirmPassword;
    // Flags for UI Control
    private bool showEditPopup = false;
    public bool showAlertMessage = false;
    public bool showTrackOrder = false;
    public bool showOrderDetail = false;
    // Page Menu and Navigation
    private string headerText = "MyAccount";
    private bool myAccountFlag = true;
    private bool changePasswordFlag = false;
    private bool orderHistoryFlag = false;
    // Order Properties
    private List<UserOrderModel> userOrders;
    public int subTotal { get; set; }
    public List<string> shippingStatuses { get; set; }
    public int shippingCharges { get; set; }
    public string shippingAddress { get; set; }
    public string paymentMode { get; set; }
    public int finalTotal { get; set; }
    public List<CartModel> myCart { get; set; }
    // Messages
    string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await ChangeActiveMenu("MyAccount"); // Show MyAccount as a default
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadUserData(); // Reload user data when parameters are set or updated
    }

    private async Task LoadUserData()
    {
        try
        {
            var userJson = await SecureStorage.Default.GetAsync("User");
            if (!string.IsNullOrEmpty(userJson))
            {
                user = JsonConvert.DeserializeObject<UserModel>(userJson);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            navManager.NavigateTo("/login");
        }
    }

    private async Task ChangeActiveMenu(string menu)
    {
        headerText = menu;
        switch (menu)
        {
            case "MyAccount":
                myAccountFlag = true;
                changePasswordFlag = false;
                orderHistoryFlag = false;
                break;

            case "ChangePassword":
                myAccountFlag = false;
                changePasswordFlag = true;
                orderHistoryFlag = false;
                break;

            case "OrderHistory":
                myAccountFlag = false;
                changePasswordFlag = false;
                orderHistoryFlag = true;
                await GetOrderByUserID(user.Id);
                break;
        }
        StateHasChanged();
    }

    private async Task GetOrderByUserID(int userId)
    {
        userOrders = await webShopAppService.GetOrdersByUserId(userId) ?? new List<UserOrderModel>();
    }

    private void ToggleAlertMessage()
    {
        showAlertMessage = !showAlertMessage;
    }

    private void EditButtonClick(UserModel userToUpdate)
    {
        this.userToUpdate = new UserModel
            {
                Id = userToUpdate.Id,
                Name = userToUpdate.Name,
                Email = userToUpdate.Email,
                Mobile = userToUpdate.Mobile,
                Address = userToUpdate.Address
            };
        ToggleEditPopup();
    }

    private void ToggleEditPopup()
    {
        showEditPopup = !showEditPopup;
    }

    private async Task UpdateUser()
    {
        var updatedUser = await webShopAppService.UpdateUserAsync(userToUpdate);

        if (updatedUser != null)
        {
            await SecureStorage.Default.SetAsync("User", JsonConvert.SerializeObject(updatedUser)); // Update SecureStorage
            ToggleEditPopup();
            Message = "User Updated Successfully !!";
            ToggleSuccessPopup();
            userToUpdate = new UserModel();
            user = updatedUser;
        }
        else
        {
            Message = "Failed to update user!!";
            ToggleSuccessPopup();
        }
    }

    private void ToggleSuccessPopup()
    {
        showAlertMessage = showAlertMessage == true ? false : true;
    }

      private void ToggleOrderDetailPopup()
    {
        showOrderDetail = showOrderDetail == true ? false : true;
    }

    private void ToggleTrackOrderPopup()
    {
        showTrackOrder = showTrackOrder == true ? false : true;
    }

    private async Task ChangePassword_Click()
    {
        if (passwordModel.Password != confirmPassword)
        {
            Message = "Password & Confirm Password do not match";
            ToggleAlertMessage();
            return;
        }

        passwordModel.HashedPassword = ComputeSha256Hash(passwordModel.Password);
        passwordModel.OldPassword = ComputeSha256Hash(passwordModel.OldPassword);
        passwordModel.UserId = user.Id;

        try
        {
            var response = await webShopAppService.ChangePassword(passwordModel);
            if (response.IsSuccessStatusCode)
            {
                passwordModel = new PasswordModel();
                confirmPassword = string.Empty;
                Message = "Password changed successfully";
            }
            else
            {
                Message = await response.Content.ReadAsStringAsync(); // Read error message from the response
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
        ToggleAlertMessage();
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }

    private async Task Detail_Click(string orderNumber)
    {
        myCart = await webShopAppService.GetOrderDetailForUser(user.Id, orderNumber);
        if (myCart != null && myCart.Count > 0)
        {
            subTotal = myCart.FirstOrDefault().SubTotal;
            shippingCharges = myCart.FirstOrDefault().ShippingCharges;
            finalTotal = myCart.FirstOrDefault().Total;
            shippingAddress = myCart.FirstOrDefault().ShippingAddress;
            paymentMode = myCart.FirstOrDefault().PaymentMode;
        }
        ToggleOrderDetailPopup();
    }

    private async Task Track_Click(string orderNumber)
    {
        shippingStatuses = await webShopAppService.GetShippingStatusForOrder(orderNumber);
        ToggleTrackOrderPopup();
    }
}

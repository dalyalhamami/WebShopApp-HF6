@page "/login"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<style>
    /* Style for the container div */
    .loginBox {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        max-width: 500px;
        margin: auto;
    }

    /* Style for the form box */
    .box {
        width: 100%;
    }

    /* Style for the form heading */
    h1 {
        font-size: 2rem;
        color: #333;
        margin-bottom: 20px;
    }

    /* Style for input fields */
    input[type="email"], input[type="password"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1rem;
    }

        input[type="email"]::placeholder,
        input[type="password"]::placeholder {
            color: #888;
        }

    /* Style for submit button */
    input[type="submit"] {
        width: 100%;
        padding: 15px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
    }

        input[type="submit"]:hover {
            background-color: #0056b3;
        }

    /* Style for validation messages */
    .validation-message {
        color: #e52e50;
        font-size: 0.875rem;
        margin-bottom: 10px;
    }

    /* Style for alert message */
    p {
        color: #e52e50;
        font-size: 1rem;
        text-align: center;
    }

    /* Style for the container */
    div {
        margin-top: 20px;
    }
</style>

<div style="min-height:700px;">
    <div class="loginBox">
        <div class="box">
            <h1>Login</h1>

            <EditForm Model="@userLoginModel" OnValidSubmit="Login_Click">
                <ValidationSummary />

                <InputText type="email" name="email" class="email" placeholder="Email" @bind-Value="userLoginModel.Email" autocomplete="off" />
                <ValidationMessage For="@(() => userLoginModel.Email)" class="validation-message" />
                <br /><br />
                <InputText type="password" name="password" class="password" placeholder="Password" @bind-Value="userLoginModel.Password" />
                <ValidationMessage For="@(() => userLoginModel.Password)" class="validation-message" />
                <br /><br />
                <input type="submit" class="btn-primary" value="Login" />
            </EditForm>
        </div>

        <div>
            <br /><br />
            <p style="color: #e52e50;">
                <h4>@alertMessage</h4>
            </p>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public LoginModel userLoginModel { get; set; } = new LoginModel();
    public string alertMessage { get; set; }

    private async Task Login_Click()
    {
        alertMessage = "";

        // Validate Email
        if (string.IsNullOrEmpty(userLoginModel.Email))
        {
            alertMessage = "Email is required";
            StateHasChanged();
            return;
        }

        // Validate Password
        if (string.IsNullOrEmpty(userLoginModel.Password))
        {
            alertMessage = "Password is required";
            StateHasChanged();
            return;
        }

        string hashedPassword = ComputeSha256Hash(userLoginModel.Password);

        try
        {
            // Attempt to login
            var user = await webShopAppService.LoginAsync(userLoginModel.Email, hashedPassword);

            if (user != null)
            {
                // Successful login, store user info and navigate
                await SecureStorage.Default.SetAsync("User", JsonConvert.SerializeObject(user));
                await notify.InvokeAsync();
                navManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            // Show the error message returned from the service
            alertMessage = ex.Message;
            StateHasChanged();
        }
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}

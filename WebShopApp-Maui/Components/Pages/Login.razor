@page "/login"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<style>
    .login-container {
        display: flex;
        flex-direction: column; 
        width: 90%; 
        max-width: 100%; 
        height: auto; 
        background-color: white;
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        overflow: hidden;
        margin: 20px auto 20px;
        font-family: 'Arial', sans-serif;
        height: 730px;
    }

    .logo-image {
        width: 100%;
        height:auto;
        text-align: center;
        padding:20px;
    }

    .login-section {
        background-color: white;
        width: 100%;
        padding: 20px;
        text-align: center;
    }

    .login-button {
        width: 100%;
        padding: 12px;
        background-color: coral;
        border: none;
        border-radius: 5px;
        color: white;
        font-size: 16px;
        cursor: pointer;
        margin-top: 10px;
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
    }

    .message-section {
        margin-top: 30px;
        font-size: 18px;
        text-align: center;
    }

    .message-section p {
        color: coral;
        margin: 0;
    }

    .register-section p {
        font-size: 16px;
        line-height: 1.6;
        margin-bottom: 20px; 
        color: coral;
        font-family: Arial, sans-serif;
    }

    .register-button {
        width: 100%;
        padding: 12px;
        background-color: lightgray;
        color:coral;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
    }
</style>

<div class="login-container">
    <div>
        <img src="/Images/brandlogo.png" alt="Logo" class="logo-image" />
    </div>

    <!-- Login Section -->
    <div class="login-section">
        <EditForm Model="@userLoginModel" OnValidSubmit="Login_Click">
            <InputText type="email" name="email" class="email" placeholder="E-mail" @bind-Value="userLoginModel.Email" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="password" name="password" class="password" placeholder="Adgangskode" @bind-Value="userLoginModel.Password" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding: 10px;" />
            <br /><br />
            <button type="submit" class="login-button" value="Login">Log ind</button>
        </EditForm>
        <br /><br />
        <!-- Register Section -->
        <div class="register-section">
            <p>Er du ikke medlem?</p>
            <button class="register-button" @onclick="NavigateToRegister">Opret en profil</button>
        </div>
        <!-- Message Section -->
        <div class="message-section" style="display: @(string.IsNullOrEmpty(alertMessage) ? "none" : "block")">
            <p>@alertMessage</p>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public LoginModel userLoginModel { get; set; } = new LoginModel();
    public string alertMessage { get; set; }

    private async Task Login_Click()
    {
        alertMessage = "";

        // Validate Email
        if (string.IsNullOrEmpty(userLoginModel.Email))
        {
            alertMessage = "E-mail er påkrævet";
            StateHasChanged();
            return;
        }

        // Validate Password
        if (string.IsNullOrEmpty(userLoginModel.Password))
        {
            alertMessage = "Adgangskode er påkrævet";
            StateHasChanged();
            return;
        }
        else
        {
            try
            {
                string hashedPassword = ComputeSha256Hash(userLoginModel.Password);
                var user = await webShopAppService.LoginAsync(userLoginModel.Email, hashedPassword);
                if (user != null)
                {
                    await SecureStorage.Default.SetAsync("User", JsonConvert.SerializeObject(user));
                    await notify.InvokeAsync();
                    navManager.NavigateTo("/");
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("Email not registered"))
                {
                    alertMessage = "E-mail er ikke registreret";
                }
                else if (ex.Message.Contains("Incorrect password"))
                {
                    alertMessage = "Forkert adgangskode";
                }
                else
                {
                    alertMessage = "Der opstod en fejl under login. Prøv venligst igen senere";
                }
            }
        }
        StateHasChanged();
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }

    private void NavigateToRegister()
    {
        navManager.NavigateTo("/register");
    }
}

@page "/login"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<div style="min-height:700px;">
    <div class="loginBox">
        <div class="box">
            <h1>Login</h1>

            <EditForm Model="@userLoginModel" OnValidSubmit="Login_Click">
                <ValidationSummary />

                <InputText type="email" name="email" class="email" placeholder="Email" @bind-Value="userLoginModel.Email" autocomplete="off" />
                <ValidationMessage For="@(() => userLoginModel.Email)" class="validation-message" />
                <br /><br />
                <InputText type="password" name="password" class="password" placeholder="Password" @bind-Value="userLoginModel.Password" />
                <ValidationMessage For="@(() => userLoginModel.Password)" class="validation-message" />
                <br /><br />
                <input type="submit" class="btn-primary" value="Login" />
            </EditForm>
        </div>

        <div>
            <br /><br />
            <p style="color: #e52e50;">
                <h4>@alertMessage</h4>
            </p>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public LoginModel userLoginModel { get; set; } = new LoginModel();
    public string alertMessage { get; set; }

    private async Task Login_Click()
    {
        alertMessage = "";

        // Validate Email
        if (string.IsNullOrEmpty(userLoginModel.Email))
        {
            alertMessage = "Email is required";
            StateHasChanged();
            return;
        }

        // Validate Password
        if (string.IsNullOrEmpty(userLoginModel.Password))
        {
            alertMessage = "Password is required";
            StateHasChanged();
            return;
        }

        string hashedPassword = ComputeSha256Hash(userLoginModel.Password);

        try
        {
            // Attempt to login
            var user = await webShopAppService.LoginAsync(userLoginModel.Email, hashedPassword);

            if (user != null)
            {
                // Successful login, store user info and navigate
                await SecureStorage.Default.SetAsync("User", JsonConvert.SerializeObject(user));
                await notify.InvokeAsync();
                navManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            // Show the error message returned from the service
            alertMessage = ex.Message;
            StateHasChanged();
        }
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}

@page "/product"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;


    <div>
    @if (products == null)
        {
           <span>Loading...</span>
        }
    else
        {
        <span>Hello world</span>
    }
    </div>       

@if (showEditPopup == true)
{
  
   
}

@if (showDeletePopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Delete Product</h5>
                <span class="close" @onclick="ToggleDeletePopup">&times;</span>
            </div>
            <div class="modal-body">
                Are you sure you want to Delete <span style="background-color:yellow;">@productToDelete.Name</span> Product?
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Yes" @onclick="DeleteProduct" />
                <input type="button" class="btn btn-primary" value="No" @onclick="ToggleDeletePopup" />
            </div>
        </div>
    </div>
}

@if (successPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public ProductModel productModel { get; set; }
    public List<CategoryModel> categories { get; set; }
    public List<ProductModel> products { get; set; }
    public int categoryId { get; set; }
    IReadOnlyList<IBrowserFile> selectedFiles;
    List<string> imageUrls = new List<string>();
    public ProductModel productToUpdate { get; set; }
    public ProductModel productToDelete { get; set; }
    public bool showEditPopup = false;
    public bool showDeletePopup = false;
    public bool successPopup = false;
    string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
        await GetCategories();
        await GetProducts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }

    // Upload image file to server and generate URL
    private async Task<string> UploadImage(IReadOnlyList<IBrowserFile> files)
    {
        if (files != null && files.Count > 0)
        {
            var file = files.FirstOrDefault();
            using var stream = file.OpenReadStream();
            var fileName = file.Name;
            var imagePath = Path.Combine("wwwroot", "images", fileName);
            using var fileStream = new FileStream(imagePath, FileMode.Create);
            await stream.CopyToAsync(fileStream);
            var imageUrl = $"/images/{fileName}";
            return imageUrl;
        }
        return null;
    }

    private async Task GetCategories()
    {
        categories = await webShopAppService.GetCategoriesAsync();
    }

    private async Task SaveProduct()
    {
        var imageUrl = await UploadImage(selectedFiles);
        if (imageUrl != null)
        {
            productModel.ImageUrl = imageUrl;
            var savedProduct = await webShopAppService.SaveProductAsync(productModel);
            if (savedProduct != null)
            {
                await GetProducts();
                ClearForm();
            }
            else
            {
                Console.WriteLine("Failed to save product");
            }
        }
        else
        {
            Console.WriteLine("Failed to upload image");
        }
    }

    private async Task UpdateProduct()
    {
        // Retrieve category details based on selected CategoryId
        var selectedCategory = categories.FirstOrDefault(c => c.Id == productToUpdate.CategoryId);
        if (selectedCategory != null)
        {
            productToUpdate.CategoryName = selectedCategory.Name;
        }

        var updatedProduct = await webShopAppService.UpdateProductAsync(productToUpdate);

        if (updatedProduct != null)
        {
            ToggleEditPopup();
            Message = "Product Updated Successfully !!";
            ToggleSuccessPopup();
            productToUpdate = new ProductModel();
            await GetProducts();
        }
        else
        {
            Message = "Product Not Updated. Try Again !!";
            ToggleSuccessPopup();
        }
    }

    private async Task DeleteProduct()
    {
        if (productToDelete != null)
        {
            var flag = await webShopAppService.DeleteProductAsync(productToDelete.Id);
            ToggleDeletePopup();
            if (flag)
            {
                Message = "Product Deleted Successfully !!";
            }
            else
            {
                Message = "Product Not Deleted. Try Again !!";
            }

            ToggleSuccessPopup();
            productToDelete = new ProductModel();
            await GetProducts();
        }
    }

    private async Task GetProducts()
    {
        products = await webShopAppService.GetProductsAsync();
    }

    private void ClearForm()
    {
        productModel = new ProductModel();
        imageUrls = new List<string>();
    }

    private void EditButtonClick(ProductModel productToUpdate)
    {
        this.productToUpdate = productToUpdate;
        ToggleEditPopup();
    }

    private void DeleteButtonClick(ProductModel productToDelete)
    {
        this.productToDelete = productToDelete; 
        ToggleDeletePopup(); 
    }

    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }

    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        successPopup = successPopup == true ? false : true;
    }
}
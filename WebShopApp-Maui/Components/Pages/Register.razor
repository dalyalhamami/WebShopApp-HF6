@page "/register"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<div style="min-height: 700px;">
    <div class="loginBox">
        <div class="box">
            <h1>Register</h1>
            <EditForm Model="@userModel" OnValidSubmit="Register_Click">
                <ValidationSummary />

                <InputText type="text" name="name" placeholder="Name" class="email" @bind-Value="userModel.Name" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Name)" class="validation-message" />
                <br /><br />
                <InputText type="email" name="email" placeholder="Email" class="email" @bind-Value="userModel.Email" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Email)" class="validation-message" />
                <br /><br />
                <InputText type="text" name="mobile" placeholder="Mobile" class="email" @bind-Value="userModel.Mobile" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Mobile)" class="validation-message" />
                <br /><br />
                <InputText type="password" name="password" placeholder="Password" class="password" @bind-Value="userModel.Password" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Password)" class="validation-message" />
                <br /><br />
                <InputText type="password" name="confirmPassword" placeholder="Confirm Password" class="password" @bind-Value="userModel.ConfirmPassword" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.ConfirmPassword)" class="validation-message" />
                <br /><br />
                <InputText type="text" name="address" placeholder="Address" class="email" @bind-Value="userModel.Address" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Address)" class="validation-message" />
                <br /><br />
                <input type="submit" class="btn-primary" value="Register" />
            </EditForm>
            <a href="login"><div class="btn-primary" style="margin-top: 10px;">Login</div></a>
        </div>
        <div>
            <br /><br />
            <p style="color:#e52e50">
                <h4>@alertMessage</h4>
            </p>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public UserModel userModel { get; set; } = new UserModel();
    public string alertMessage { get; set; }

    private async Task Register_Click()
    {
        alertMessage = "";

        // Name Validation
        if (string.IsNullOrEmpty(userModel.Name))
        {
            alertMessage = "Name is required";
            StateHasChanged();
            return;
        }

        // Email Validation
        if (string.IsNullOrEmpty(userModel.Email))
        {
            alertMessage = "Email is required";
            StateHasChanged();
            return;
        }
        else if (!new EmailAddressAttribute().IsValid(userModel.Email))
        {
            alertMessage = "Invalid email address";
            StateHasChanged();
            return;
        }

        // Mobile Validation
        if (string.IsNullOrEmpty(userModel.Mobile))
        {
            alertMessage = "Mobile is required";
            StateHasChanged();
            return;
        }

        // Password Validation
        if (string.IsNullOrEmpty(userModel.Password))
        {
            alertMessage = "Password is required";
            StateHasChanged();
            return;
        }

        // Confirm Password Validation
        if (string.IsNullOrEmpty(userModel.ConfirmPassword))
        {
            alertMessage = "Confirm Password is required";
            StateHasChanged();
            return;
        }
        else if (userModel.Password != userModel.ConfirmPassword)
        {
            alertMessage = "Password and confirm password do not match";
            StateHasChanged();
            return;
        }

        // Address Validation
        if (string.IsNullOrEmpty(userModel.Address))
        {
            alertMessage = "Address is required";
            StateHasChanged();
            return;
        }

        // If all validations pass, proceed with registration
        var result = await webShopAppService.RegisterUser(userModel);

        if (result.user != null)
        {
            // Save user information using SecureStorage
            await SecureStorage.Default.SetAsync("User", JsonConvert.SerializeObject(result.user));
            await notify.InvokeAsync();
            navManager.NavigateTo("/login");
        }
        else
        {
            alertMessage = result.errorMessage.Contains("Email already exists")
                ? "Error: The email address already exists"
                : $"Error: {result.errorMessage}";
        }
        StateHasChanged();
    }
}

@page "/register"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<style>
    .register-container {
        display: flex;
        flex-direction: column;
        width: 90%;
        max-width: 100%;
        height: 770px;
        background-color: white;
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        overflow: hidden;
        margin: 0 auto 0;
        font-family: Arial, sans-serif;
    }

    .register-section h1 {
        color: coral;
        font-size: 24px;
        margin-bottom: 20px;
        text-transform: uppercase;
        text-align: center;
        letter-spacing: 2px;
        font-family: Arial, sans-serif;
    }

    .register-section {
        background-color: white;
        width: 100%;
        padding: 20px;
        text-align: center;
    }

    .register-button {
        width: 100%;
        padding: 12px;
        background-color: coral;
        border: none;
        border-radius: 5px;
        color: white;
        font-size: 16px;
        cursor: pointer;
        margin-top: 10px;
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
    }

    .login-section p {
        font-size: 16px;
        line-height: 1.6;
        margin-bottom: 10px;
        color: coral;
        font-family: 'Arial', sans-serif;
        text-align: center;
    }

    .login-button {
        width: 100%;
        padding: 12px;
        background-color: lightgray;
        color: coral;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
    }

     /* Message Section */
    .message-section {
        margin-top: 10px;
        font-size: 18px; 
        text-align: center;
    }

    .message-section p {
        color: coral;
        margin: 0;
    }
</style>

<div class="register-container">
    <!-- Register Section -->
    <div class="register-section">
        <h1>Opret en profil</h1>
        <EditForm Model="@userModel" OnValidSubmit="Register_Click">
            <InputText type="text" name="name" placeholder="Navn" class="email" @bind-Value="userModel.Name" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="email" name="email" placeholder="E-mail" class="email" @bind-Value="userModel.Email" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="text" name="mobile" placeholder="Mobil" class="email" @bind-Value="userModel.Mobile" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="password" name="password" placeholder="Adgangskode" class="password" @bind-Value="userModel.Password" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="password" name="confirmPassword" placeholder="Bekræft adgangskode" class="password" @bind-Value="userModel.ConfirmPassword" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="text" name="address" placeholder="Adresse" class="email" @bind-Value="userModel.Address" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <button type="submit" class="register-button">Gem</button>
        </EditForm>
        <br />
        <!-- Login Section -->
        <div class="login-section">
            <p>Har du allerede en konto?</p>
            <button class="login-button" @onclick="NavigateToLogin">Log ind</button>
        </div>
    </div>
    <!-- Message Section -->
    <div class="message-section" style="display: @(string.IsNullOrEmpty(alertMessage) ? "none" : "block")">
        <p>@alertMessage</p>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public RegisterModel userModel { get; set; } = new RegisterModel();
    public string alertMessage { get; set; }

    private async Task Register_Click()
    {
        alertMessage = "";

        // Validate Name
        if (string.IsNullOrEmpty(userModel.Name))
        {
            alertMessage = "Navn er påkrævet";
            StateHasChanged();
            return;
        }

        // Validate Email
        if (string.IsNullOrEmpty(userModel.Email))
        {
            alertMessage = "E-mail er påkrævet";
            StateHasChanged();
            return;
        }
        else if (!new EmailAddressAttribute().IsValid(userModel.Email))  // Using built-in validation
        {
            alertMessage = "Ugyldig e-mailadresse";
            StateHasChanged();
            return;
        }

        // Validate Mobile
        if (string.IsNullOrEmpty(userModel.Mobile))
        {
            alertMessage = "Mobilnummer er påkrævet";
            StateHasChanged();
            return;
        }

        // Validate Password
        if (string.IsNullOrEmpty(userModel.Password))
        {
            alertMessage = "Adgangskode er påkrævet";
            StateHasChanged();
            return;
        }

        // Validate Password Length
        if (userModel.Password.Length < 6)
        {
            alertMessage = "Adgangskoden skal være mindst 6 tegn lang";
            StateHasChanged();
            return;
        }

        // Validate Password Length
        if (userModel.Password.Length < 6)
        {
            alertMessage = "Password must be at least 6 characters long";
            StateHasChanged();
            return;
        }

        // Validate Confirm Password
        if (string.IsNullOrEmpty(userModel.ConfirmPassword))
        {
            alertMessage = "Bekræft adgangskode er påkrævet";
            StateHasChanged();
            return;
        }

        // Validate Password Match
        if (userModel.Password != userModel.ConfirmPassword)
        {
            alertMessage = "Adgangskode og bekræft adgangskode stemmer ikke overens";
            StateHasChanged();
            return;
        }

        // Validate Address
        if (string.IsNullOrEmpty(userModel.Address))
        {
            alertMessage = "Adresse er påkrævet";
            StateHasChanged();
            return;
        }

        // Hash the password
        userModel.Password = ComputeSha256Hash(userModel.Password);

        var result = await webShopAppService.RegisterUser(userModel);

        if (result.user != null)
        {
            // Save user information using SecureStorage
            await SecureStorage.Default.SetAsync("User", JsonConvert.SerializeObject(result.user));
            await notify.InvokeAsync();
            navManager.NavigateTo("/login");
        }
        else
        {
            if (result.errorMessage.Contains("Email already exists"))
            {
                alertMessage = "E-mail adressen findes allerede, Vælg venligst en anden e-mail";
            }
            else if (result.errorMessage.Contains("Please choose another password"))
            {
                alertMessage = "Vælg venligst en anden adgangskode";
            }
            else
            {
                alertMessage = $"Error: {result.errorMessage}";
            }
        }
        StateHasChanged();
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }

    private void NavigateToLogin()
    {
        navManager.NavigateTo("/login");
    }
}

@page "/register"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<style>
    /* Style for the container div */
    .loginBox {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        max-width: 500px;
        margin: auto;
    }

    /* Style for the form box */
    .box {
        width: 100%;
    }

    /* Style for the form heading */
    h1 {
        font-size: 2rem;
        color: #333;
        margin-bottom: 20px;
    }

    /* Style for input fields */
    input[type="text"], input[type="email"], input[type="password"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1rem;
    }

        input[type="text"]::placeholder,
        input[type="email"]::placeholder,
        input[type="password"]::placeholder {
            color: #888;
        }

    /* Style for submit button */
    input[type="submit"] {
        width: 100%;
        padding: 15px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
    }

        input[type="submit"]:hover {
            background-color: #0056b3;
        }

    /* Style for validation messages */
    .validation-message {
        color: #e52e50;
        font-size: 0.875rem;
        margin-bottom: 10px;
    }

    /* Style for the login link */
    a div {
        text-align: center;
        padding: 10px;
        background-color: #007bff;
        color: white;
        border-radius: 4px;
        text-decoration: none;
        font-size: 1rem;
        cursor: pointer;
    }

        a div:hover {
            background-color: #0056b3;
        }

    /* Style for alert message */
    p {
        color: #e52e50;
        font-size: 1rem;
        text-align: center;
    }

    /* Style for the container */
    div {
        margin-top: 20px;
    }
</style>

    <div class="loginBox">
        <div class="box">
            <h1>Register</h1>
            <EditForm Model="@userModel" OnValidSubmit="Register_Click">
                <ValidationSummary />

                <InputText type="text" name="name" placeholder="Name" class="email" @bind-Value="userModel.Name" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Name)" class="validation-message" />
                <br /><br />
                <InputText type="email" name="email" placeholder="Email" class="email" @bind-Value="userModel.Email" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Email)" class="validation-message" />
                <br /><br />
                <InputText type="text" name="mobile" placeholder="Mobile" class="email" @bind-Value="userModel.Mobile" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Mobile)" class="validation-message" />
                <br /><br />
                <InputText type="password" name="password" placeholder="Password" class="password" @bind-Value="userModel.Password" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Password)" class="validation-message" />
                <br /><br />
                <InputText type="password" name="confirmPassword" placeholder="Confirm Password" class="password" @bind-Value="userModel.ConfirmPassword" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.ConfirmPassword)" class="validation-message" />
                <br /><br />
                <InputText type="text" name="address" placeholder="Address" class="email" @bind-Value="userModel.Address" autocomplete="off" />
                <ValidationMessage For="@(() => userModel.Address)" class="validation-message" />
                <br /><br />
                <input type="submit" class="btn-primary" value="Register" />
            </EditForm>
            <a href="login"><div class="btn-primary" style="margin-top: 10px;">Login</div></a>
        </div>
        <div>
            <br /><br />
            <p style="color:#e52e50">
                <h4>@alertMessage</h4>
            </p>
        </div>
    </div>

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public RegisterModel userModel { get; set; } = new RegisterModel();
    public string alertMessage { get; set; }

    private async Task Register_Click()
    {
        alertMessage = "";

        if (userModel.Password != userModel.ConfirmPassword)
        {
            alertMessage = "Password and confirm password do not match";
            StateHasChanged();
            return;
        }

        // Hash the password
        userModel.Password = ComputeSha256Hash(userModel.Password);

        var result = await webShopAppService.RegisterUser(userModel);

        if (result.user != null)
        {
            // Save user information using SecureStorage
            await SecureStorage.Default.SetAsync("User", JsonConvert.SerializeObject(result.user));
            await notify.InvokeAsync();
            navManager.NavigateTo("/login");
        }
        else
        {
            alertMessage = result.errorMessage.Contains("Email already exists")
                ? "Error: The email address already exists"
                : $"Error: {result.errorMessage}";
        }
        StateHasChanged();
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}

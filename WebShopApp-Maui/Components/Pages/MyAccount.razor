@page "/myaccount"
@using WebShopApp_Maui.Services
@using Microsoft.Maui.Storage;
@using Newtonsoft.Json;
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;

<style>
    .container {
        max-width: 1200px;
        font-family: Arial, sans-serif;
        margin-top: 50px;
    }

    .clearfix::after {
        content: "";
        display: table;
        clear: both;
    }

    .column {
        width: 100%;
        float: none;
        padding: 0;
    }

    /* Menu styles */
    .menu {
        background-color: white;
        border-radius: 15px;
        padding: 10px;
        width: 100%; 
    }

    /* Vertical Menu */
    .vertical-menu {
        display: flex;
        flex-direction: column;
        align-items: stretch; 
        width: 100%; 
        padding: 10px;
        border-radius: 8px;
    }

    /* Menu Items */
    .vertical-menu a {
        background-color: #ffc1b3; /* Coral color */
        color: white;
        text-align: center;
        padding: 12px 20px; 
        text-decoration: none;
        border-radius: 8px;
        font-size: 16px;
        margin-bottom: 10px; 
        transition: background-color 0.3s ease;
        display: block; 
    }

    /* Last menu item should not have a bottom margin */
    .vertical-menu a:last-child {
        margin-bottom: 0;
    }

    /* Hover and Active States */
    .vertical-menu a:hover {
        background-color: #ff8b75;
    }

    .vertical-menu a.active {
        background-color: #ff6150;
    }

/* Content Styling */
.content {
    width: 100%;
    height: auto; 
    margin-bottom: 20px; 
}

/* My Account Styling*/
.profile-card {
    background-color: #f7f7f7;
    color: coral;
    border-radius: 5px;
    padding: 20px; 
    width: 100%; 
    margin: 0 auto; 
    align-items: center;
    border: 1px solid #e5e5e5;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    font-family: Arial, sans-serif;
}

/* Avatar Styling */
.avatar-img {
    border-radius: 50%;
    width: 100px; 
    height: 100px;
    object-fit: cover;
    margin-bottom: 10px;
    background-color: #f0f0f0;
    margin-left:30%;
}

.profile-title {
    margin-top: 10px; 
    margin-bottom: 40px;
}

.profile-title h2 {
    font-size: 20px; 
    margin-bottom: 5px;
    text-align: center;
}

.profile-details {
    color: dimgray;
    font-family: Arial, sans-serif;
}

.profile-details strong {
    color: coral;
    margin-left: 20px;
}

/* Edit Button Styling */
.btn-edit {
    background-color: #ff6150;
    color: white;
    border: none;
    padding: 10px; 
    border-radius: 5px;
    cursor: pointer;
    width: 80px; 
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-top: 10px;
    margin-left: 33%;
}

/* Password Change Styling */
.password-change-container {
    border: 1px solid #e5e5e5;
    border-radius: 5px;
    padding: 20px;
    max-width: 100%;
    height: 370px;
    margin: 0 auto;
    background-color: #ffffff;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
    font-family: Arial, sans-serif;
}

.password-form {
    margin: 30px auto 30px; 
}

/* Order History Styling */
.order-history-card {
    border: 1px solid #e5e5e5;
    background-color: #f7f7f7;
    border-radius: 5px;
    padding: 10px 5px 10px;
    width: 100%; 
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    /* margin-top: 10px;  */
}

.history-table {
    width: 100%;
    border: 1px solid gray;
    margin-top: 10px; /* Reduced margin */
}

.history-table th,
.history-table td {
    border: 1px solid dimgray;
    text-align: center;
    vertical-align: top;
    font-size: 14px; 
}

.button-cell {
    align-content: center;
}

/* Empty Order History */
.empty-history {
    font-weight: bold;
    text-align: center;
    font-size: 22px; 
    color: dimgray;
    margin-top: 20%;
}

/* Order Details Modal */
.card-body {
    overflow-y: auto;
    max-height: 300px; 
    width: 300px;
    font-family: Arial, sans-serif;
}

.product-info {
    display: flex;
    align-items: center;
}

.product-image {
    max-width: 50px; /* Reduced size for mobile */
    max-height: auto;
}

.product-details p {
    margin: 0;
    font-size: 14px;
    color: #333;
}

/* Summary Table Styling */
.summary-table {
    width: 100%;
    background-color: transparent;
    border-collapse: separate;
    border-spacing: 2px;
    border-color: gray;
    border-radius: 4px;
}

.summary-table td {
    padding: .5rem; /* Reduced padding for mobile */
    vertical-align: top;
}

/* Modal Styling */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        padding: 15px;
        box-sizing: border-box;
    }

    .modal-content {
        width: 100%;
        max-width: 90%;
        padding: 15px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3);
    }

    .modal-header, .modal-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header {
        border-bottom: 1px solid #f1f1f1;
        padding-bottom: 10px;
    }

    .modal-body {
        text-align: center;
        padding: 15px 0; 
    }

    .modal-body p {
        font-size: 0.9rem; 
        margin-bottom: 10px;
        color: #333;
    }

    /* User info section */
    .user-info {
        display: flex;
        justify-content: space-between;
        padding: 10px;
    }

    .user-info label {
       width: 90px; 
       padding: 8px; 
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        padding-top: 10px;
        border-top: 1px solid #f1f1f1;
    }

    .modal-btn {
        border: none;
        padding: 8px; 
        font-size: 0.9em; 
        border-radius: 5px;
        cursor: pointer;
        width: 40%; 
    }

    .confirm {
        background-color: #ff6150;
        color: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .cancel {
        background-color: lightgray;
        color: coral;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .custom-close {
        background-color: transparent;
        border: none;
        font-size: 1.2rem; 
        color: #000;
        cursor: pointer;
        position: relative;
        top: -10px;
        right: -10px;
    }

    .close-btn {
        border: none;
        padding: 8px; 
        font-size: 0.9em; 
        border-radius: 5px;
        cursor: pointer;
        width: 40%;
        background-color: #ff6150;
        color: white;
    }
</style>

<Header/>

<div class="container">
    @if (user != null)
    {
        <div class="clearfix">
            <div class="column menu">
                <div class="vertical-menu">
                    <a class="@(myAccountFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("MyAccount"))'>Min Profil</a>
                    <a class="@(changePasswordFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("ChangePassword"))'>Skift Adgangskode</a>
                    <a class="@(orderHistoryFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("OrderHistory"))'>Ordrehistorik</a>
                </div>
            </div>
            <div class="column content">
                <br />

                @if (myAccountFlag)
                {
                    <div class="profile-card">
                        <div class="profile-avatar">
                            <img src="/Images/useravatar.jpg" alt="Profile Image" class="avatar-img">
                        </div>
                       <div class="profile-title">
                            <h2>Min Profil</h2> 
                        </div>  
                        <div class="profile-details">
                            <p><strong>Navn:</strong> @user.Name</p>
                            <p><strong>E-mail:</strong> @user.Email</p>
                            <p><strong>Mobil:</strong> @user.Mobile</p>
                            <p><strong>Adresse:</strong> @user.Address</p>
                        </div>
                       <button class="btn btn-edit" @onclick="() => EditButtonClick(user)">Rediger</button>
                    </div>
                }

                @if (changePasswordFlag)
                {
                    <div class="password-change-container">
                        <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword_Click">

                            <div class="password-form">
                                <InputText type="password" name="password" placeholder="Nuværende adgangskode" class="password" @bind-Value="passwordModel.OldPassword" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 80%; padding:10px;" />
                            </div>

                            <div class="password-form">
                                <InputText type="password" name="password" placeholder="Ny adgangskode" class="password" @bind-Value="passwordModel.Password" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 80%; padding:10px;" />
                            </div>

                            <div class="password-form">
                                <InputText type="password" name="confirmPassword" placeholder="Bekræft adgangskode" class="password" @bind-Value="confirmPassword" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 80%; padding:10px;" />
                            </div>

                            <div class="password-form">
                                <button type="submit" class="modal-btn confirm">Gem</button>
                            </div>
                        </EditForm>
                    </div>
                }

                @if (orderHistoryFlag)
                {
               @if (userOrders == null || userOrders.Count == 0)
                    {
                        <p class="empty-history">Ingen ordrer fundet</p>
                    }
                    else
                    {
                        <div class="order-history-card">
                            <table class="table table-striped table-bordered bg-light history-table">
                                <thead>
                                    <tr>
                                        <th>Ordre</th>
                                        <th>Ordredato</th>
                                        <th style="width:80px;">Spor</th>
                                        <th style="width:80px;">Detaljer</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ord in userOrders)
                                    {
                                        <tr>
                                            <td class="button-cell">@ord.OrderId</td>
                                            <td class="button-cell">@ord.CreatedOn</td>
                                            <td class="button-cell">
                                                <button class="btn custom-btn" @onclick="(() => Track_Click(ord.OrderId))">
                                                    <i class="fa fa-truck"></i>
                                                </button>
                                            </td>
                                            <td class="button-cell">
                                                <button class="btn custom-btn" @onclick="(() => Detail_Click(ord.OrderId))">
                                                    <i class="fa fa-info-circle"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>              
                    }
                }

                @if (showAlertMessage == true)
                {
                 <div class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <span></span>
                                <button class="custom-close" @onclick="ToggleSuccessPopup">&times;</button>
                            </div>
                            <div class="modal-body">
                                @Message
                            </div>
                            <div class="modal-footer">
                                <input type="button" class="close-btn" value="Luk" @onclick="ToggleSuccessPopup" />
                            </div>
                        </div>
                    </div>
                }

                @if (showEditPopup == true)
                {
                    <div class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5>Rediger profil</h5>
                                <button class="custom-close" @onclick="ToggleEditPopup">&times;</button>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="@userToUpdate" OnValidSubmit="UpdateUser">
                                    <div class="user-info">
                                        <label>Navn:</label>
                                        <InputText @bind-Value="userToUpdate.Name" class="form-control" />
                                    </div>
                                    <div class="user-info">
                                        <label>E-mail:</label>
                                        <InputText @bind-Value="userToUpdate.Email" class="form-control" />
                                    </div>
                                    <div class="user-info">
                                        <label>Mobil:</label>
                                        <InputText @bind-Value="userToUpdate.Mobile" class="form-control" />
                                    </div>
                                    <div class="user-info">
                                        <label>Adresse:</label>
                                        <InputText @bind-Value="userToUpdate.Address" class="form-control" />
                                    </div>
                                    <br />
                                    <div class="modal-footer">
                                        <button type="button" class="modal-btn cancel" @onclick="ToggleEditPopup">Annuller</button>
                                        <button type="submit" class="modal-btn confirm">Gem</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>                }

                @if (showTrackOrder == true)
                {
                      <div class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5>Spor Ordre</h5>
                                <span class="custom-close" @onclick="ToggleTrackOrderPopup">&times;</span>
                            </div>
                            <div class="modal-body" style="margin-left: 20px;">
                                @if (shippingStatuses != null && shippingStatuses.Count > 0)
                                {
                                    <table>
                                        <tbody>
                                            @foreach (var status in shippingStatuses)
                                            {
                                                <tr>
                                                    <td>
                                                        <i class="fa fa-check-circle" style="color: green;"></i> @status
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <span>Ingen opdatering på ordrelevering. Venligst tjek igen senere</span>
                                }
                            </div>
                            <div class="modal-footer">
                                <input type="button" class="close-btn" value="Luk" @onclick="ToggleTrackOrderPopup" />
                            </div>
                        </div>
                    </div>
                }

                @if (showOrderDetail == true)
                {
                       <div class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5>Ordredetaljer</h5>
                                <button class="custom-close" @onclick="ToggleOrderDetailPopup">&times;</button>
                            </div>
                            <div class="modal-body">
                                @if (myCart != null && myCart.Count > 0)
                                {
                                    <div class="card-body">
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr>
                                                        <th></th>
                                                        <th class="button-cell">Produkt</th>
                                                        <th class="button-cell">Antal</th>
                                                        <th class="button-cell">Pris</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var cart in myCart)
                                                    {
                                                        <tr>
                                                            <td>
                                                                <img class="product-image" src="@cart.ProductImage" alt="Product" />
                                                            </td>
                                                            <td class="button-cell">@cart.ProductName</td>
                                                            <td class="button-cell">@cart.Quantity</td>
                                                            <td class="button-cell">@(cart.Price * cart.Quantity) Kr</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        <table class="summary-table">
                                            <tr>
                                                <td style="font-weight:bold;">Subtotal</td>
                                                <td class="button-cell">@subTotal.00 Kr</td>
                                            </tr>
                                            <tr>
                                                <td style="font-weight:bold;">Fragt</td>
                                                <td class="button-cell">@shippingCharges.00 Kr</td>
                                            </tr>
                                            <tr>
                                                <td style="font-weight:bold;">Total</td>
                                                <td class="button-cell">@finalTotal.00 Kr</td>
                                            </tr>
                                            <tr>
                                                <td style="font-weight:bold;">Adresse</td>
                                                <td class="button-cell">@shippingAddress</td>
                                            </tr>
                                            <tr>
                                                <td style="font-weight:bold;">Betalingsmetode</td>
                                                <td class="button-cell">@paymentMode</td>
                                            </tr>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <p>Ingen varer fundet i ordren</p>
                                }
                            </div>
                            <div class="modal-footer">
                                <input type="button" class="close-btn" value="Luk" @onclick="ToggleOrderDetailPopup" />
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    }
    else
    {
        <p>Ingen brugerdata fundet. Venligst <a href="/login">log ind</a></p>
    }
</div>


@code {
    // User Properties
    private UserModel user;
    private UserModel userToUpdate;
    private PasswordModel passwordModel = new PasswordModel();
    private string confirmPassword;
    // Flags for UI Control
    private bool showEditPopup = false;
    public bool showAlertMessage = false;
    public bool showTrackOrder = false;
    public bool showOrderDetail = false;
    // Page Menu and Navigation
    private bool myAccountFlag = true;
    private bool changePasswordFlag = false;
    private bool orderHistoryFlag = false;
    // Order Properties
    private List<UserOrderModel> userOrders;
    public int subTotal { get; set; }
    public List<string> shippingStatuses { get; set; }
    public int shippingCharges { get; set; }
    public string shippingAddress { get; set; }
    public string paymentMode { get; set; }
    public int finalTotal { get; set; }
    public List<CartModel> myCart { get; set; }
    // Messages
    string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await ChangeActiveMenu("MyAccount"); // Show MyAccount as a default
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadUserData(); // Reload user data when parameters are set or updated
    }

    private async Task LoadUserData()
    {
        try
        {
            var userJson = await SecureStorage.Default.GetAsync("User");
            if (!string.IsNullOrEmpty(userJson))
            {
                user = JsonConvert.DeserializeObject<UserModel>(userJson);
                await GetOrderByUserID(user.Id);
            }
            else
            {
                navManager.NavigateTo("/login");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            navManager.NavigateTo("/login");
        }
    }

    private async Task ChangeActiveMenu(string menu)
    {
        switch (menu)
        {
            case "MyAccount":
                myAccountFlag = true;
                changePasswordFlag = false;
                orderHistoryFlag = false;
                break;

            case "ChangePassword":
                myAccountFlag = false;
                changePasswordFlag = true;
                orderHistoryFlag = false;
                break;

            case "OrderHistory":
                myAccountFlag = false;
                changePasswordFlag = false;
                orderHistoryFlag = true;
                await GetOrderByUserID(user.Id);
                break;
        }
        StateHasChanged();
    }

    private async Task GetOrderByUserID(int userId)
    {
        userOrders = await webShopAppService.GetOrdersByUserId(userId) ?? new List<UserOrderModel>();
    }

    private void ToggleAlertMessage()
    {
        showAlertMessage = !showAlertMessage;
    }

    private void EditButtonClick(UserModel userToUpdate)
    {
        this.userToUpdate = new UserModel
            {
                Id = userToUpdate.Id,
                Name = userToUpdate.Name,
                Email = userToUpdate.Email,
                Mobile = userToUpdate.Mobile,
                Address = userToUpdate.Address
            };
        ToggleEditPopup();
    }

    private void ToggleEditPopup()
    {
        showEditPopup = !showEditPopup;
    }

    private async Task UpdateUser()
    {
        var updatedUser = await webShopAppService.UpdateUserAsync(userToUpdate);

        if (updatedUser != null)
        {
            await SecureStorage.Default.SetAsync("User", JsonConvert.SerializeObject(updatedUser)); // Update SecureStorage
            ToggleEditPopup();
            Message = "Bruger opdateret med succes !!";
            ToggleSuccessPopup();
            userToUpdate = new UserModel();
            user = updatedUser;
        }
        else
        {
            Message = "Kunne ikke opdatere bruger !!";
            ToggleSuccessPopup();
        }
    }

    private void ToggleSuccessPopup()
    {
        showAlertMessage = showAlertMessage == true ? false : true;
    }

      private void ToggleOrderDetailPopup()
    {
        showOrderDetail = showOrderDetail == true ? false : true;
    }

    private void ToggleTrackOrderPopup()
    {
        showTrackOrder = showTrackOrder == true ? false : true;
    }

    private async Task ChangePassword_Click()
    {
        if (string.IsNullOrEmpty(passwordModel.OldPassword))
        {
            Message = "Nuværende Adgangskode er påkrævet";
            ToggleAlertMessage();
            return;
        }
        else if (string.IsNullOrEmpty(passwordModel.Password))
        {
            Message = "Ny Adgangskode er påkrævet";
            ToggleAlertMessage();
            return;
        }

        if (passwordModel.Password != confirmPassword)
        {
            Message = "Adgangskode og bekræft adgangskode stemmer ikke overens";
            ToggleAlertMessage();
            return;
        }

        passwordModel.HashedPassword = ComputeSha256Hash(passwordModel.Password);
        passwordModel.OldPassword = ComputeSha256Hash(passwordModel.OldPassword);
        passwordModel.UserId = user.Id;

        try
        {
            var response = await webShopAppService.ChangePassword(passwordModel);
            if (response.IsSuccessStatusCode)
            {
                passwordModel = new PasswordModel();
                confirmPassword = string.Empty;
                Message = "Adgangskode ændret med succes";
            }
            else
            {
                Message = await response.Content.ReadAsStringAsync(); // Read error message from the response
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
        ToggleAlertMessage();
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }

    private async Task Detail_Click(string orderNumber)
    {
        myCart = await webShopAppService.GetOrderDetailForUser(user.Id, orderNumber);
        if (myCart != null && myCart.Count > 0)
        {
            subTotal = myCart.FirstOrDefault().SubTotal;
            shippingCharges = myCart.FirstOrDefault().ShippingCharges;
            finalTotal = myCart.FirstOrDefault().Total;
            shippingAddress = myCart.FirstOrDefault().ShippingAddress;
            paymentMode = myCart.FirstOrDefault().PaymentMode;
        }
        ToggleOrderDetailPopup();
    }

    private async Task Track_Click(string orderNumber)
    {
        shippingStatuses = await webShopAppService.GetShippingStatusForOrder(orderNumber);
        ToggleTrackOrderPopup();
    }
}

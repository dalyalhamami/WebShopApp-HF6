@using WebShopApp_Blazor.Models
@using WebShopApp_Blazor.Services
@inject IWebShopAppService webShopAppService
@inject NavigationManager navManager;
@inject ProtectedSessionStorage sessionStorage;

    @if (category == null)
    {
         <span>Indlæser...</span>
    }
    else
    {
            <div class="card">
        <h4 class="card-header">Tilføj nyt kategori</h4>
                <div class="card-body">
                    <EditForm Model="@category" OnValidSubmit="SaveCategory">
                        <DataAnnotationsValidator />
                        <div class="form-row">
                            <div class="form-group col-5">
                                <label>Name :</label>
                                <InputText @bind-Value="category.Name" class="form-control" />
                                <ValidationMessage For="@(() => category.Name)" />
                            </div>
                        </div>
                <div class="button-right">
                    <input type="button" class="btn-clear" value="Ryd" @onclick="ClearForm" />
                    <input type="submit" class="btn-save" value="Gem" />
                </div>
                    </EditForm>
                </div>

                <div class="card-body">
                    @if (categories == null)
                    {
                        <span>Indlæser...</span>
                    }
                    else
                    {
                <table class="table table-striped table-bordered bg-light category-table">
                            <thead>
                                <tr>
                                     <th class="button-cell">Nr.</th>
                                     <th class="button-cell">Titel</th>
                                     <th class="button-cell">Rediger</th>
                                     <th class="button-cell">Slet</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var (index, cat) in categories.Select((cat, i) => (i + 1, cat)))
                                {
                                    <tr>
                                        <td class="button-cell">@index</td>
                                        <td class="button-cell">@cat.Name</td>
                                        <td class="button-cell">
                                            <button class="btn custom-btn" @onclick="(() => EditButtonClick(cat))">
                                            <i class="fa fa-pencil"></i>
                                            </button>
                                        </td>
                                        <td class="button-cell">
                                            <button class="btn custom-btn" @onclick="(() => DeleteButtonClick(cat))">
                                            <i class="fa fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
    }

@if (showEditPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Rediger Kategori</h5>
                <button class="custom-close" @onclick="ToggleEditPopup">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@categoryToUpdate" OnInvalidSubmit="UpdateCategory">
                    <div class="category-info">
                            <label>Navn:</label>
                            <InputText @bind-Value="categoryToUpdate.Name" class="form-control" />
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <input type="button" class="modal-btn cancel" value="Annuller" @onclick="ToggleEditPopup" />
                <input type="button" class="modal-btn confirm" value="Gem" @onclick="UpdateCategory" />
            </div>
        </div>
    </div>
}

@if (showDeletePopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Slet Kategori</h5>
                <button class="custom-close" @onclick="ToggleDeletePopup">&times;</button>
            </div>
            <div class="modal-body">
                Er du sikker på, at du vil slette <span style="background-color:#ffc1b3;">@categoryToDelete.Name</span> kategorien?
            </div>
            <div class="modal-footer">
                <input type="button" class="modal-btn cancel" value="Nej" @onclick="ToggleDeletePopup" />
                <input type="button" class="modal-btn confirm" value="Ja" @onclick="DeleteCategory" />
            </div>
        </div>
    </div>
}

@if (successPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span></span>
                <button class="custom-close" @onclick="ToggleDeletePopup">&times;</button>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="close-btn" value="Luk" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}

@code {

    [CascadingParameter]
    public EventCallback notify { get; set; }

    public CategoryModel category { get; set; }
    public List<CategoryModel> categories { get; set; }
    public CategoryModel categoryToUpdate { get; set; }
    public CategoryModel categoryToDelete { get; set; }
    public bool showEditPopup = false;
    public bool showDeletePopup = false;
    public bool successPopup = false;
    public string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        category = new CategoryModel();
        await GetCategories();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }

    private async Task SaveCategory()
    {
        await webShopAppService.SaveCategoryAsync(category);
        Message = "Kategori tilføjet med succes !!";
        ToggleSuccessPopup();
        category = new CategoryModel();
        await GetCategories();
        ClearForm();
    }

    private async Task UpdateCategory()
    {
        var updatedCategory = await webShopAppService.UpdateCategoryAsync(categoryToUpdate);

        if (updatedCategory != null)
        {
            ToggleEditPopup();
            Message = "Kategori opdateret med succes !!";
            ToggleSuccessPopup();
            categoryToUpdate = new CategoryModel();
            await GetCategories();
        }
        else
        {
            // Handle case where updatedCategory is null, indicating an unsuccessful update
            Message = "Kategori ikke opdateret. Prøv igen !!";
            ToggleSuccessPopup();
        }
    }

    private async Task DeleteCategory()
    {
        if (categoryToDelete != null)
        {
            var flag = await webShopAppService.DeleteCategoryAsync(categoryToDelete.Id);
            ToggleDeletePopup();
            if (flag)
            {
                Message = "Kategori slettet med succes !!";
            }
            else
            {
                Message = "Kategori ikke slettet. Prøv igen !!";
            }

            ToggleSuccessPopup();
            categoryToDelete = null;
            await GetCategories();
        }
    }

    private async Task GetCategories()
    {
        categories = await webShopAppService.GetCategoriesAsync();
    }

    private void ClearForm()
    {
        category = new CategoryModel();
    }

    private void EditButtonClick(CategoryModel categoryToUpdate)
    {
        this.categoryToUpdate = categoryToUpdate;
        ToggleEditPopup();   
    }

    private void DeleteButtonClick(CategoryModel categoryToDelete)
    {
        this.categoryToDelete = categoryToDelete;
        ToggleDeletePopup();
    }

    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }

    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        successPopup = successPopup == true ? false : true;
    }
}
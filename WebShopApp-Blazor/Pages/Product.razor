@using WebShopApp_Blazor.Models
@using WebShopApp_Blazor.Services
@inject IWebShopAppService webShopAppService
@inject NavigationManager navManager;
@inject ProtectedSessionStorage sessionStorage;

    @if (productModel == null)
    {
       <span>Indlæser...</span>
    }
    else
    {
        <div class="card">
            <h4 class="card-header">Tilføj nyt produkt</h4>

            <div class="card-body">
                <EditForm Model="@productModel" OnValidSubmit="SaveProduct">

                    <div class="form-group row">
                        <div class="form-group col-3">
                            <label>Navn:</label>
                            <InputText @bind-Value="productModel.Name" class="form-control" />
                        </div>
                        <div class="form-group col-3">
                            <label>Pris:</label>
                            <InputNumber @bind-Value="productModel.Price" class="form-control" />
                        </div>
                        <div class="form-group col-3">
                            <label>Lager:</label>
                            <InputNumber @bind-Value="productModel.Stock" class="form-control" />
                        </div>
                        <div class="form-group col-3">
                            <label>Kategori:</label>
                            @if (categories != null)
                            {
                                <select class="form-control" @onchange="@CategoryClicked">
                                <option value="">- Vælg -</option>
                                    @foreach (var cat in categories)
                                    {
                                        <option value="@cat.Id">@cat.Name</option>
                                    }
                                </select>
                            }
                        </div>
                    </div>
                    <br />
                    <div class="form-group row">
                        <div class="form-group col-6">
                        <label>Beskrivelse:</label>
                            <InputText @bind-Value="productModel.Description" class="form-control" />
                        </div>
                        <div class="form-group col-6">
                        <label>Vælg billede:</label>
                            <label style="border:1px ridge #808080; display: block;">
                                <InputFile OnChange="@OnInputFileChange" multiple></InputFile>
                            </label>
                            <table>
                                <tr>
                                   @foreach (var imgsrc in imageUrls)
                                    {
                                    <td style="padding: 10px;">
                                        <img src="@imgsrc" style="max-width: 100%; height: auto; border: 1px solid #ddd; margin-left:450px;">
                                    </td>
                                    }
                                 </tr>
                            </table>
                        </div>
                    </div>
                    <br />
                    <div class="button-right">
                        <input type="button" class="btn-clear" value="Ryd" @onclick="ClearForm" />
                        <input type="submit" class="btn-save" value="Gem" />
                    </div>
                </EditForm>
            </div>

        <div class="card-body">
                @if (products == null)
                {
                    <span>Indlæser...</span>
                }
                else
                {
                    <table class="table table-striped table-bordered bg-light product-table">
                        <thead>
                            <tr>
                                <th class="button-cell">Nr.</th>
                                <th class="button-cell">Titel</th>
                                <th class="button-cell">Kategori</th>
                                <th class="button-cell">Lager</th>
                                <th class="button-cell">Rediger</th>
                                <th class="button-cell">Slet</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (index, prod) in products.Select((prod, i) => (i + 1, prod)))
                            {
                                <tr>
                                    <td class="button-cell">@index</td>
                                    <td class="button-cell">@prod.Name</td>
                                    <td class="button-cell">@prod.CategoryName</td>
                                    <td class="button-cell">@prod.Stock</td>
                                    <td class="button-cell">
                                        <button class="btn custom-btn" @onclick="(() => EditButtonClick(prod))">
                                            <i class="fa fa-pencil"></i>
                                        </button>
                                    </td>
                                    <td class="button-cell">
                                        <button class="btn custom-btn" @onclick="(() => DeleteButtonClick(prod))">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>   
    }

@if (showEditPopup == true)
{
  <div class="modal">
      <div class="modal-content">
            <div class="modal-header">
                <h5>Rediger Produkt</h5>
                <button class="custom-close" @onclick="ToggleEditPopup">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@productToUpdate" OnInvalidSubmit="UpdateProduct">
                        <div class="product-info">
                            <label>Navn:</label>
                            <InputText @bind-Value="productToUpdate.Name" class="form-control" />
                        </div>
                        <div class="product-info">
                            <label>Pris:</label>
                            <InputNumber @bind-Value="productToUpdate.Price" class="form-control" />
                        </div>
                        <div class="product-info">
                            <label>Lager:</label>
                            <InputNumber @bind-Value="productToUpdate.Stock" class="form-control" />
                        </div>
                        <div class="product-info">
                            <label>Beskrivelse: </label>
                            <InputText @bind-Value="productToUpdate.Description" class="form-control" />
                        </div>
                        <div class="product-info">
                            <label>Kategori:</label>
                            <select @bind="@productToUpdate.CategoryId" style="width:100%;  border-radius:5px;">
                                @if (categories != null)
                                {
                                    foreach (var cat in categories)
                                    {
                                        <option value="@cat.Id">@cat.Name</option>
                                    }
                                }
                            </select>
                        </div>
                </EditForm>
            </div>
            <br /><br />
            <div class="modal-footer">
                <input type="button" class="modal-btn cancel" value="Annuller" @onclick="ToggleEditPopup" />
                <input type="button" class="modal-btn confirm" value="Gem" @onclick="UpdateProduct" />
            </div>
      </div>
  </div>  
}

@if (showDeletePopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Slet Produkt</h5>
                <button class="custom-close" @onclick="ToggleDeletePopup">&times;</button>
            </div>
            <div class="modal-body">
                Er du sikker på, at du vil slette <span style="background-color: #ffc1b3;">@productToDelete.Name</span> produktet?
            </div>
            <div class="modal-footer">
                <input type="button" class="modal-btn cancel" value="Nej" @onclick="ToggleDeletePopup" />
                <input type="button" class="modal-btn confirm" value="Ja" @onclick="DeleteProduct" />
            </div>
        </div>
    </div>
}

@if (successPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span></span>
                <button class="custom-close" @onclick="ToggleSuccessPopup">&times;</button>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="close-btn" value="Luk" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public ProductModel productModel { get; set; }
    public List<CategoryModel> categories { get; set; }
    public List<ProductModel> products { get; set; }
    public int categoryId { get; set; }
    IReadOnlyList<IBrowserFile> selectedFiles;
    List<string> imageUrls = new List<string>();
    public ProductModel productToUpdate { get; set; }
    public ProductModel productToDelete { get; set; }
    public bool showEditPopup = false;
    public bool showDeletePopup = false;
    public bool successPopup = false;
    string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
        await GetCategories();
        await GetProducts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }

    private async Task GetCategories()
    {
        categories = await webShopAppService.GetCategoriesAsync();
    }

    private async Task<string> UploadImage(IReadOnlyList<IBrowserFile> files)
    {
        if (files != null && files.Count > 0)
        {
            var file = files.FirstOrDefault();
            using var stream = file.OpenReadStream();
            var fileName = file.Name;
            var imagePath = Path.Combine("wwwroot", "images", fileName);
            using var fileStream = new FileStream(imagePath, FileMode.Create);
            await stream.CopyToAsync(fileStream);

            var imageUrl = $"/Images/{fileName}";
            return imageUrl;
        }
        return null;
    }

    private async Task SaveProduct()
    {
        var imageUrl = await UploadImage(selectedFiles);
        if (imageUrl != null)
        {
            productModel.ImageUrl = imageUrl;
            var savedProduct = await webShopAppService.SaveProductAsync(productModel);
            if (savedProduct != null)
            {
                await GetProducts();
                ClearForm();
            }
            else
            {
                Console.WriteLine("Kunne ikke gemme produkt");
            }
        }
        else
        {
            Console.WriteLine("Kunne ikke uploade billede");
        }
    }

    private async Task UpdateProduct()
    {
        // Retrieve category details based on selected CategoryId
        var selectedCategory = categories.FirstOrDefault(c => c.Id == productToUpdate.CategoryId);
        if (selectedCategory != null)
        {
            productToUpdate.CategoryName = selectedCategory.Name;
        }

        var updatedProduct = await webShopAppService.UpdateProductAsync(productToUpdate);

        if (updatedProduct != null)
        {
            ToggleEditPopup();
            Message = "Produkt opdateret med succes !!";
            ToggleSuccessPopup();
            productToUpdate = new ProductModel();
            await GetProducts();
        }
        else
        {
            Message = "Produktet blev ikke opdateret. Prøv igen !!";
            ToggleSuccessPopup();
        }
    }

    private async Task DeleteProduct()
    {
        if (productToDelete != null)
        {
            var flag = await webShopAppService.DeleteProductAsync(productToDelete.Id);
            ToggleDeletePopup();
            if (flag)
            {
                Message = "Produktet blev slettet med succes !!";
            }
            else
            {
                Message = "Produktet blev ikke slettet. Prøv igen !!";
            }

            ToggleSuccessPopup();
            productToDelete = new ProductModel();
            await GetProducts();
        }
    }

    private async Task GetProducts()
    {
        products = await webShopAppService.GetProductsAsync();
    }

    private void CategoryClicked(ChangeEventArgs categoryEvent)
    {
        if (categoryEvent.Value != null && int.TryParse(categoryEvent.Value.ToString(), out int selectedCategoryId))
        {
            categoryId = selectedCategoryId;
            productModel.CategoryId = categoryId;

            // Find the category with the matching ID
            var selectedCategory = categories.FirstOrDefault(c => c.Id == categoryId);

            // Update the product's category name
            if (selectedCategory != null)
            {
                productModel.CategoryName = selectedCategory.Name;
            }
            StateHasChanged();
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        imageUrls.Clear(); // Clear previous images

        foreach (var imageFile in selectedFiles)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            imageUrls.Add(imgData);
        }
        Message = $"{selectedFiles.Count} fil(er) valgt";
        StateHasChanged();
    }

    private void ClearForm()
    {
        productModel = new ProductModel();
        imageUrls = new List<string>();
    }

    private void EditButtonClick(ProductModel productToUpdate)
    {
        this.productToUpdate = productToUpdate;
        ToggleEditPopup();
    }

    private void DeleteButtonClick(ProductModel productToDelete)
    {
        this.productToDelete = productToDelete; 
        ToggleDeletePopup(); 
    }

    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }

    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        successPopup = successPopup == true ? false : true;
    }

}
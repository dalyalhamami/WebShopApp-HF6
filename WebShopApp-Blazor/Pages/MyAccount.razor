@page "/myaccount"
@using WebShopApp_Blazor.Models
@using WebShopApp_Blazor.Services
@inject IWebShopAppService webShopAppService
@inject NavigationManager navManager;
@inject ProtectedSessionStorage sessionStorage;

<Header/>

<div class="container">
  @if (user != null)
    {
        <div class="clearfix">
            <div class="column menu">
                <div class="vertical-menu">
                    <a class="@(myAccountFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("MyAccount"))'>Min Profil</a>
                    <a class="@(changePasswordFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("ChangePassword"))'>Skift Adgangskode</a>
                    <a class="@(orderHistoryFlag ? "active" : "")" @onclick='(() => ChangeActiveMenu("OrderHistory"))'>Ordrehistorik</a>
                </div>
            </div>
            <div class="column content">
                <br />
                @if (myAccountFlag)
                {
                   
                    <div class="profile-card row">
                        <div class="profile-title col-6">
                            <h2>Min Profil</h2> 
                            <p>Hej, @user.Name!</p>
                            <p>Du kan administrere din profil og se dine ordrer herfra</p>
                        </div>  
                        <div style="display:flex; justify-content:space-between;" class="col-6">
                        <div class="profile-details">
                            <p><strong>Navn:</strong> @user.Name</p>
                            <p><strong>E-mail:</strong> @user.Email</p>
                            <p><strong>Mobil:</strong> @user.Mobile</p>
                            <p><strong>Adresse:</strong> @user.Address</p>
                        </div>
                        <div class="profile-avatar">
                            <img src="/Images/useravatar.jpg" alt="Profile Image" class="avatar-img">
                            <button class="btn btn-edit" @onclick="() => EditButtonClick(user)">Rediger</button>
                        </div>
                        </div>            
                    </div>
                }

                @if (changePasswordFlag)
                {
                    <div class="form-group">
                        <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword_Click">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label>Old Password:</label>
                                <InputText type="password" class="form-control" id="oldpwd" @bind-Value="passwordModel.OldPassword" autocomplete="off"></InputText>
                                <ValidationMessage For="@(() => passwordModel.OldPassword)"></ValidationMessage>
                            </div>
                            <div class="form-group">
                                <label>New Password:</label>
                                <InputText type="password" class="form-control" id="newpwd" @bind-Value="passwordModel.Password" autocomplete="off"></InputText>
                                <ValidationMessage For="@(() => passwordModel.Password)"></ValidationMessage>
                            </div>
                            <div class="form-group">
                                <label>Confirm Password:</label>
                                <InputText type="password" class="form-control" id="confirmpwd" @bind-Value="confirmPassword" autocomplete="off"></InputText>
                                <ValidationMessage For="@(() => confirmPassword)"></ValidationMessage>
                            </div>
                            <br />
                            <div class="form-group">
                                <button type="submit" class="btn btn-primary">Submit</button>
                            </div>
                        </EditForm>
                    </div>
                }

                @if (orderHistoryFlag)
                {
                    @if (userOrders == null || userOrders.Count == 0)
                    {
                        <p>No orders found</p>
                    }
                    else
                    {
                        <table class="table table-striped table-bordered bg-light">
                            <thead>
                                <tr>
                                    <th>Order</th>
                                    <th>Order Date</th>
                                    <th style="width:80px;">Track</th>
                                    <th style="width:80px;">Details</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ord in userOrders)
                                {
                                    <tr>
                                        <td class="button-cell">@ord.OrderId</td>
                                        <td class="button-cell">@ord.CreatedOn</td>
                                        <td class="button-cell">
                                            <button class="btn custom-btn" @onclick="(() => Track_Click(ord.OrderId))">
                                                <i class="fa fa-truck"></i>
                                            </button>
                                        </td>
                                        <td class="button-cell">
                                            <button class="btn custom-btn" @onclick="(() => Detail_Click(ord.OrderId))">
                                                <i class="fa fa-info-circle"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                }

                @if (showAlertMessage == true)
                {
                     <div class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <span></span>
                                <button class="custom-close" @onclick="ToggleSuccessPopup">&times;</button>
                            </div>
                            <div class="modal-body">
                                @Message
                            </div>
                            <div class="modal-footer">
                                <input type="button" class="close-btn" value="Luk" @onclick="ToggleSuccessPopup" />
                            </div>
                        </div>
                    </div>
                }

                @if (showEditPopup == true)
                {
                    <div class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5>Rediger profil</h5>
                                <button class="custom-close" @onclick="ToggleEditPopup">&times;</button>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="@userToUpdate" OnValidSubmit="UpdateUser">
                                    <div class="user-info">
                                        <label>Navn:</label>
                                        <InputText @bind-Value="userToUpdate.Name" class="form-control" />
                                    </div>
                                    <div class="user-info">
                                        <label>E-mail:</label>
                                        <InputText @bind-Value="userToUpdate.Email" class="form-control" />
                                    </div>
                                    <div class="user-info">
                                        <label>Mobil:</label>
                                        <InputText @bind-Value="userToUpdate.Mobile" class="form-control" />
                                    </div>
                                    <div class="user-info">
                                        <label>Adresse:</label>
                                        <InputText @bind-Value="userToUpdate.Address" class="form-control" />
                                    </div>
                                    <br />
                                    <div class="modal-footer">
                                        <button type="button" class="modal-btn cancel" @onclick="ToggleEditPopup">Annuller</button>
                                        <button type="submit" class="modal-btn confirm">Gem</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                }

                @if (showOrderDetail == true)
                {
                    <div class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5>Order Details</h5>
                                <span class="close" @onclick="ToggleOrderDetailPopup">&times;</span>
                            </div>
                            <div class="modal-body">
                                @if (myCart != null && myCart.Count > 0)
                                {
                                    <div class="card-body">
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr>
                                                        <th class="button-cell">Product</th>
                                                        <th class="button-cell">Quantity</th>
                                                        <th class="button-cell">Prise</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var cart in myCart)
                                                    {
                                                        <tr>
                                                            <td class="button-cell">
                                                                <div class="product-info">
                                                                    <div class="product-image">
                                                                        <img src="@cart.ProductImage" alt="Product" />
                                                                    </div>
                                                                    <div class="product-details">
                                                                        <p>@cart.ProductName</p>
                                                                    </div>
                                                                </div>
                                                            </td>
                                                            <td class="button-cell">@cart.Quantity</td>
                                                            <td class="button-cell">$@(cart.Price * cart.Quantity).00</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                        <table class="summary-table">
                                            <tr>
                                                <td style="font-weight:bold;">Subtotal</td>
                                                <td class="button-cell">$@subTotal.00</td>
                                            </tr>
                                            <tr>
                                                <td style="font-weight:bold;">Shipping Charges</td>
                                                <td class="button-cell">$@shippingCharges.00</td>
                                            </tr>
                                            <tr>
                                                <td style="font-weight:bold;">Total</td>
                                                <td class="button-cell">$@finalTotal.00</td>
                                            </tr>
                                            <tr>
                                                <td style="font-weight:bold;">Shipping Address</td>
                                                <td class="button-cell">@shippingAddress</td>
                                            </tr>
                                            <tr>
                                                <td style="font-weight:bold;">Payment Mode</td>
                                                <td class="button-cell">@paymentMode</td>
                                            </tr>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <p>No items found in the order.</p>
                                }
                            </div>
                            <div class="modal-footer">
                                <input type="button" class="btn btn-secondary" value="Close" @onclick="ToggleOrderDetailPopup" />
                            </div>
                        </div>
                    </div>
                }

                @if (showTrackOrder == true)
                {
                    <div class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5>Track Order</h5>
                                <span class="close" @onclick="ToggleTrackOrderPopup">&times;</span>
                            </div>
                            <div class="modal-body">
                                @if (shippingStatuses != null && shippingStatuses.Count > 0)
                                {
                                    <table>
                                        <tbody>
                                            @foreach (var status in shippingStatuses)
                                            {
                                                <tr>
                                                    <td>
                                                        <i class="fa fa-check-circle" style="color: green;"></i> @status
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <span>No update on order shipping. Please check after some time.</span>
                                }
                            </div>
                            <div class="modal-footer">
                                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleTrackOrderPopup" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <p>No user data found. Please <a href="/login">login</a>.</p>
    }
</div>

@code {
    // User Properties
    private UserModel user;
    private UserModel userToUpdate;
    private PasswordModel passwordModel = new PasswordModel();
    private string confirmPassword;
    // Flags for UI Control
    private bool showEditPopup = false;
    public bool showAlertMessage = false;
    public bool showTrackOrder = false;
    public bool showOrderDetail = false;
    // Page Menu and Navigation
    private bool myAccountFlag = true;
    private bool changePasswordFlag = false;
    private bool orderHistoryFlag = false;
    // Order Properties
    private List<UserOrderModel> userOrders;
    public int subTotal { get; set; }
    public List<string> shippingStatuses { get; set; }
    public int shippingCharges { get; set; }
    public string shippingAddress { get; set; }
    public string paymentMode { get; set; }
    public int finalTotal { get; set; }
    public List<CartModel> myCart { get; set; }
    // Messages
    string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await ChangeActiveMenu("MyAccount"); // Show MyAccount as a default
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadUserData(); // Reload user data when parameters are set or updated
    }

    private async Task LoadUserData()
    {
        try
        {
            var loggedInUser = await sessionStorage.GetAsync<UserModel>("loggedInUser");
            if (loggedInUser.Success)
            {
                user = loggedInUser.Value;
                await GetOrderByUserID(user.Id);
            }
            else
            {
                navManager.NavigateTo("/login");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            navManager.NavigateTo("/login");
        }
    }

    private async Task ChangeActiveMenu(string menu)
    {
        switch (menu)
        {
            case "MyAccount":
                myAccountFlag = true;
                changePasswordFlag = false;
                orderHistoryFlag = false;
                break;

            case "ChangePassword":
                myAccountFlag = false;
                changePasswordFlag = true;
                orderHistoryFlag = false;
                break;

            case "OrderHistory":
                myAccountFlag = false;
                changePasswordFlag = false;
                orderHistoryFlag = true;
                await GetOrderByUserID(user.Id);
                break;
        }
        StateHasChanged();
    }

    private async Task GetOrderByUserID(int userId)
    {
        userOrders = await webShopAppService.GetOrdersByUserId(userId) ?? new List<UserOrderModel>();
    }

    private void ToggleAlertMessage()
    {
        showAlertMessage = showAlertMessage == true ? false : true;
    }

    private void EditButtonClick(UserModel userToUpdate)
    {
        this.userToUpdate = new UserModel
            {
                Id = userToUpdate.Id,
                Name = userToUpdate.Name,
                Email = userToUpdate.Email,
                Mobile = userToUpdate.Mobile,
                Address = userToUpdate.Address
            };
        ToggleEditPopup();
    }

    private void ToggleEditPopup()
    {
        showEditPopup = !showEditPopup;
    }

    private async Task UpdateUser()
    {
        var updatedUser = await webShopAppService.UpdateUserAsync(userToUpdate);

        if (updatedUser != null)
        {
            // Save the updated user data to session storage
            await sessionStorage.SetAsync("loggedInUser", updatedUser);

            ToggleEditPopup();
            Message = "Bruger opdateret med succes !!";
            ToggleSuccessPopup();
            userToUpdate = new UserModel();
            user = updatedUser;
        }
        else
        {
            Message = "Kunne ikke opdatere bruger !!";
            ToggleSuccessPopup();
        }
    }

    private void ToggleSuccessPopup()
    {
        showAlertMessage = showAlertMessage == true ? false : true;
    }

      private void ToggleOrderDetailPopup()
    {
        showOrderDetail = showOrderDetail == true ? false : true;
    }

    private void ToggleTrackOrderPopup()
    {
        showTrackOrder = showTrackOrder == true ? false : true;
    }

    private async Task ChangePassword_Click()
    {
        if (passwordModel.Password != confirmPassword)
        {
            Message = "Password & Confirm Password do not match";
            ToggleAlertMessage();
            return;
        }

        passwordModel.HashedPassword = ComputeSha256Hash(passwordModel.Password);
        passwordModel.OldPassword = ComputeSha256Hash(passwordModel.OldPassword);
        passwordModel.UserId = user.Id;

        try
        {
            var response = await webShopAppService.ChangePassword(passwordModel);
            if (response.IsSuccessStatusCode)
            {
                passwordModel = new PasswordModel();
                confirmPassword = string.Empty;
                Message = "Password changed successfully";
            }
            else
            {
                Message = await response.Content.ReadAsStringAsync(); // Read error message from the response
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
        ToggleAlertMessage();
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }

    private async Task Detail_Click(string orderNumber)
    {
        myCart = await webShopAppService.GetOrderDetailForUser(user.Id, orderNumber);
        if (myCart != null && myCart.Count > 0)
        {
            subTotal = myCart.FirstOrDefault().SubTotal;
            shippingCharges = myCart.FirstOrDefault().ShippingCharges;
            finalTotal = myCart.FirstOrDefault().Total;
            shippingAddress = myCart.FirstOrDefault().ShippingAddress;
            paymentMode = myCart.FirstOrDefault().PaymentMode;
        }
        ToggleOrderDetailPopup();
    }

    private async Task Track_Click(string orderNumber)
    {
        shippingStatuses = await webShopAppService.GetShippingStatusForOrder(orderNumber);
        ToggleTrackOrderPopup();
    }
}
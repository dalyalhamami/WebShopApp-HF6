@page "/forgot-password"
@using WebShopApp_Blazor.Services
@inject IWebShopAppService webShopAppService
@inject NavigationManager navManager

<div class="verify-container">
    @if (user == null)
    {
        <div class="verify-box">
            <h1>Bekræft e-mail</h1>

            <EditForm Model="@verfiyEmailModel" OnValidSubmit="VerifyEmail_Click">
                <InputText type="email" name="email" placeholder="E-mail" class="email" @bind-Value="verfiyEmailModel.Email" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
                <br /><br />

                <div class="form-actions">
                    <div class="login-text">
                        <p>Har du allerede en konto?<a href="/login" class="login-link"> Log ind</a></p>
                    </div>
                    <button class="verify-button">Bekræft</button>
                </div>
            </EditForm>
      
        </div>
    }
    else
    {
        <div class="verify-box">
            <h1>Nulstil adgangskode</h1>

            <EditForm Model="@verfiyEmailModel" OnValidSubmit="ChangePassword_Click">
                <InputText type="email" name="email" placeholder="E-mail" class="email" @bind-Value="verfiyEmailModel.Email" autocomplete="off" readonly style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
                <br /><br />
                <InputText type="password" name="password" placeholder="Ny adgangskode" class="password" @bind-Value="passwordModel.Password" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
                <br /><br />
                <InputText type="password" name="password" placeholder="Bekræft ny adgangskode" class="password" @bind-Value="confirmPassword" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
                <br /><br />

                <div class="form-actions">
                    <div class="login-text">
                        <p>Har du allerede en konto?<a href="/login" class="login-link"> Log ind</a></p>
                    </div>
                    <button class="verify-button">Gem</button>
                </div>
            </EditForm>
        </div>
    }

    <div class="message-section" style="display: @(string.IsNullOrEmpty(alertMessage) ? "none" : "block")">
        <p>@alertMessage</p>
    </div>
</div>


@code {
    private VerifyEmailModel verfiyEmailModel = new VerifyEmailModel();
    private PasswordModel passwordModel = new PasswordModel();
    private string confirmPassword;

    private string alertMessage;
    private UserModel user;
    private int userId;

    private async Task VerifyEmail_Click()
    {
        if (string.IsNullOrEmpty(verfiyEmailModel.Email))
        {
            alertMessage = "E-mail er påkrævet";
            return;
        }

        bool emailExists = await webShopAppService.CheckEmailAsync(verfiyEmailModel.Email);
        if (!emailExists)
        {
            alertMessage = "E-mail er ikke registreret";
        }
        else
        {
            alertMessage = string.Empty;
            var users = await webShopAppService.GetUsersAsync();
            user = users.FirstOrDefault(u => u.Email.Equals(verfiyEmailModel.Email, StringComparison.OrdinalIgnoreCase));
            if (user != null)
            {
                userId = user.Id;
            }
            else
            {
                alertMessage = "Bruger med denne e-mail blev ikke fundet";
            }
        }
    }

    private async Task ChangePassword_Click()
    {
        if (string.IsNullOrEmpty(passwordModel.Password))
        {
            alertMessage = "Adgangskode er påkrævet";
            return;
        }

        if (string.IsNullOrEmpty(confirmPassword))
        {
            alertMessage = "Bekræftelse af adgangskode er påkrævet";
            return;
        }

        if (passwordModel.Password != confirmPassword)
        {
            alertMessage = "Adgangskode og bekræftelse af adgangskode stemmer ikke overens";
            return;
        }

        passwordModel.HashedPassword = ComputeSha256Hash(passwordModel.Password);
        passwordModel.OldPassword = "";
        passwordModel.UserId = userId;

        try
        {
            var response = await webShopAppService.ResetPassword(passwordModel);
            if (response.IsSuccessStatusCode)
            {
                passwordModel = new PasswordModel();
                confirmPassword = string.Empty;
                alertMessage = "Adgangskoden er ændret med succes";
            }
            else
            {
                alertMessage = await response.Content.ReadAsStringAsync(); 
            }
        }
        catch (Exception ex)
        {
            alertMessage = $"An error occurred: {ex.Message}";
        }
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}

@page "/"
@using WebShopApp_Blazor.Models
@using WebShopApp_Blazor.Services
@inject IWebShopAppService webShopAppService
@inject NavigationManager navManager;
@inject ProtectedSessionStorage sessionStorage;

<Header/>

<div class="container-fluid">
    <div class="header">
        <div class="header-content">
            <div class="left">
                <img src="/Images/brandlogo.png" alt="Logo" class="logo-image" />
            </div>

            <div class="search-container">
                <input type="text" class="form-control search-input" placeholder="Søg ..." @bind="searchTerm" />
                <button type="button" class="search-button" @onclick="FilterProducts">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </button>
            </div>

            <div class="filter-container">
                <!-- Category Filter -->
                <div class="form-group filter-select">
                    @if (categories != null)
                    {
                        <select class="form-control custom-select" @onchange="@CategoryClicked">
                            <option value="0">Kategori</option>
                            @foreach (var cat in categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </select>
                    }
                </div>
                <!-- Price Filter -->
                <div class="form-group filter-select">
                    <select class="form-control custom-select" @onchange="@SortByPrice">
                        <option value="0">Pris</option>
                        <option value="1">Low - High</option>
                        <option value="2">High - Low</option>
                    </select>
                </div>
            </div>

            <div class="right">
                @if (IsUserLoggedIn)
                {
                    <a href="/mycart" class="shopping-cart">
                        <i class="fa fa-shopping-cart">
                            <span>@cartCount</span>
                        </i>
                    </a>
                }
            </div>
        </div>
    </div>
</div>

@if (filteredProducts == null)
{
    <span>Indlæser...</span>
}
else if (filteredProducts.Count == 0)
{
    <span>Ingen produkter tilgængelige</span>
}
else
{
 <div class="product-container">
    <div class="row">
        @foreach (var prod in filteredProducts)
        {
                <div class="col-md-4">
                    <div class="product-card">
                        <img src="@prod.ImageUrl" alt="@prod.Name" class="product-image" @onclick="(() => OpenProductModal(prod))" />
                        <div class="product-details">
                            <h5 class="product-title">@prod.Name</h5>
                            <p class="product-description">@prod.Description</p>
                            <!-- Flex container for price and cart icon -->
                            <div class="product-price-cart">
                                <div class="price">
                                    <strong>@prod.Price</strong> <span class="currency">Kr</span>
                                </div>
                                <div class="cart-icon">
                                    <i class="fa fa-cart-plus" aria-hidden="true" @onclick="(() => AddToCart_Click(prod))"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
        }
    </div>
</div>
}

@if (showProductModal)
{
    <div class="modal" tabindex="-1" role="dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@selectedProduct.Name</h5>
                <button type="button" class="close custom-close" @onclick="CloseProductModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <img src="@selectedProduct.ImageUrl" alt="@selectedProduct.Name" />
                <p><strong>Pris:</strong> @selectedProduct.Price Kr</p>
                <p><strong>Kategori:</strong> @selectedProduct.CategoryName</p>
                <p><strong>Beskrivelse:</strong> @selectedProduct.Description</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="modal-btn cancel" @onclick="CloseProductModal">Luk</button>
                <button type="button" class="modal-btn confirm" @onclick="(() => AddToCart_Click(selectedProduct))">Læg i kurv</button>
            </div>
        </div>
    </div>
}

@if (showLoginModal)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login påkrævet</h5>
                <button type="button" class="close custom-close" @onclick="CloseLoginModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Du skal logge ind for at tilføje varer til kurven. Vil du logge ind nu?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="modal-btn cancel" @onclick="CloseLoginModal">Nej tak</button>
                <button type="button" class="modal-btn confirm" @onclick="ConfirmLogin">Ja</button>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public List<ProductModel> products { get; set; }
    public bool IsUserLoggedIn = false;
    private UserModel user;
    public bool showProductModal = false;
    public ProductModel selectedProduct { get; set; }
    private bool showLoginModal = false;
    public List<CartModel> myCart { get; set; }
    public int cartCount = 0;
    public List<ProductModel> filteredProducts { get; set; }
    public string searchTerm { get; set; } = string.Empty;
    public List<CategoryModel> categories { get; set; }
    public int selectedCategoryId { get; set; }
    private int selectedSortOption = 0; // 0 = Default, 1 = Low to High, 2 = High to Low

    protected override async Task OnInitializedAsync()
    {
        if (products == null) // Fetch products if not already initialized
        {
            products = await webShopAppService.GetProductsAsync();
        }

        if (categories == null) // Fetch categories if not already initialized
        {
            categories = await webShopAppService.GetCategoriesAsync(); // Fetch categories
        }

        filteredProducts = products; // Initialize with all products
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync(); 

            var loggedInUser = await sessionStorage.GetAsync<UserModel>("loggedInUser");
            if (loggedInUser.Success && loggedInUser.Value != null)
            {
                IsUserLoggedIn = true;
                user = loggedInUser.Value;
                await LoadCartData(); 
            }
            else
            {
                IsUserLoggedIn = false;
                navManager.NavigateTo("/");
            }
            await UpdateCartText(); // Ensure cart count is updated
            StateHasChanged();
        }
    }

    private async Task LoadCartData()
    {
        var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
        if (result.Success)
        {
            myCart = result.Value;
            cartCount = myCart.Count;
        }
        else
        {
            cartCount = 0;
        }
        StateHasChanged();
    }

    private void OpenProductModal(ProductModel product)
    {
        selectedProduct = product;
        showProductModal = true;
    }

    private void CloseProductModal()
    {
        showProductModal = false;
    }

    private async Task AddToCart_Click(ProductModel productClicked)
    {
        if (!IsUserLoggedIn)
        {
            showLoginModal = true;
            StateHasChanged();
            return;
        }

        var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
        if (!result.Success)
        {
            myCart = new List<CartModel>();
        }
        else
        {
            myCart = result.Value;
        }

        var existingProduct = myCart.FirstOrDefault(x => x.ProductId == productClicked.Id);

        if (existingProduct != null)
        {
            existingProduct.Quantity += 1;
        }
        else // Otherwise, add it to the cart
        {
            CartModel cm = new CartModel
                {
                    ProductId = productClicked.Id,
                    Quantity = 1,
                    AvailableStock = Convert.ToInt32(productClicked.Stock),
                    ProductName = productClicked.Name,
                    ProductImage = productClicked.ImageUrl,
                    Price = Convert.ToInt32(productClicked.Price)
                };
            myCart.Add(cm);
        }
        await sessionStorage.SetAsync("myCart", myCart);
        await UpdateCartText();

        cartCount = myCart.Sum(item => item.Quantity); // Calculate total quantity of items in the cart
        await notify.InvokeAsync(); // Notify other components to update
        StateHasChanged();
    }

    private async Task UpdateCartText()
    {
        var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
        if (result.Success)
        {
            myCart = result.Value;
            cartCount = myCart.Sum(item => item.Quantity);  // Update the cart count to reflect the total quantity of items
            StateHasChanged();
        }
    }

    private void CloseLoginModal()
    {
        showLoginModal = false;
        StateHasChanged();
    }

    private void ConfirmLogin()
    {
        showLoginModal = false;
        navManager.NavigateTo("/login");
    }

    private void CategoryClicked(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();

        if (int.TryParse(selectedValue, out var categoryId))
        {
            selectedCategoryId = categoryId;

            if (selectedCategoryId == 0)
            {
                filteredProducts = products;
            }
            else
            {
                filteredProducts = products.Where(p => p.CategoryId == selectedCategoryId).ToList();
            }
        }
        else
        {
            filteredProducts = products;
        }

        StateHasChanged(); // Trigger UI update
    }

    private void FilterProducts()
    {
        string searchText = searchTerm?.ToLower() ?? string.Empty;
        filteredProducts = products
            .Where(p => p.Name.ToLower().Contains(searchText))
            .ToList();
        StateHasChanged();
    }

    private void SortByPrice(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();

        if (int.TryParse(selectedValue, out var sortOption))
        {
            selectedSortOption = sortOption;

            if (selectedSortOption == 0)
            {
                filteredProducts = products.ToList();
            }
            else if (selectedSortOption == 1)
            {
                filteredProducts = filteredProducts.OrderBy(p => p.Price).ToList();
            }
            else if (selectedSortOption == 2)
            {
                filteredProducts = filteredProducts.OrderByDescending(p => p.Price).ToList();
            }
        }
        else
        {
            filteredProducts = products.ToList();
        }
        StateHasChanged();
    }
}


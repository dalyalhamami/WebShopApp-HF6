@page "/login"
@using WebShopApp_Blazor.Services
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;
@inject ProtectedSessionStorage sessionStorage;

<div class="login-container">
    <!-- Register Section -->
    <div class="register-section">
        <h2>Er du ikke medlem?</h2>
        <p>Bliv medlem for at få al den ekstra forkælelse, som Mercantøj tilbyder.</p>
        <button class="register-button" @onclick="NavigateToRegister">Opret en profil</button>
    </div>

    <!-- Login Section -->
    <div class="login-section">
        <h1>Log ind</h1>
        <EditForm Model="@userLoginModel" OnValidSubmit="Login_Click">
            <InputText type="email" name="email" class="email" placeholder="E-mail" @bind-Value="userLoginModel.Email" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;"/>
                <br /><br />
                <InputText type="password" name="password" class="password" placeholder="Adgangskode" @bind-Value="userLoginModel.Password" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding: 10px;"/>
                <br /><br />
                <a href="#" class="forgot-password" @onclick="NavigateToForgotPassword">Glemt adgangskode?</a>
                <button type="submit" class="login-button" value="Login">Log ind</button>
            </EditForm>

        <!-- Message Section -->
        <div class="message-section" style="display: @(string.IsNullOrEmpty(alertMessage) ? "none" : "block")">
            <p>@alertMessage</p>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public LoginModel userLoginModel { get; set; } = new LoginModel();
    public string alertMessage { get; set; }

    private async Task Login_Click()
    {
        alertMessage = "";

        // Validate Email
        if (string.IsNullOrEmpty(userLoginModel.Email))
        {
            alertMessage = "Email is required";
            StateHasChanged();
            return;
        }

        // Validate Password
        if (string.IsNullOrEmpty(userLoginModel.Password))
        {
            alertMessage = "Password is required";
            StateHasChanged();
            return;
        }
        else
        {
            try
            {
                string hashedPassword = ComputeSha256Hash(userLoginModel.Password);
                var loggedInUser = await webShopAppService.LoginAsync(userLoginModel.Email, hashedPassword);

                if (loggedInUser != null)
                {
                    await sessionStorage.SetAsync("loggedInUser", loggedInUser);
                    await notify.InvokeAsync();
                    navManager.NavigateTo("/");
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("Email not registered"))
                {
                    alertMessage = "Email not registered";
                }
                else if (ex.Message.Contains("Incorrect password"))
                {
                    alertMessage = "Incorrect password";
                }
                else
                {
                    alertMessage = "An error occurred during login. Please try again later";
                }
            }
        }
        StateHasChanged();
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }

    private void NavigateToRegister()
    {
        navManager.NavigateTo("/register");
    }

    private void NavigateToForgotPassword()
    {
        navManager.NavigateTo("/forgot-password");

    }
}

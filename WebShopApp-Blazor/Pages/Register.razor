@page "/register"
@using WebShopApp_Blazor.Services
@inject IWebShopAppService webShopAppService;
@inject NavigationManager navManager;
@inject ProtectedSessionStorage sessionStorage;

<div class="register-container">
    <div class="register-box">
        <h1>Opret en profil</h1>
        <EditForm Model="@userModel" OnValidSubmit="Register_Click">
            <InputText type="text" name="name" placeholder="Navn" class="email" @bind-Value="userModel.Name" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="email" name="email" placeholder="E-mail" class="email" @bind-Value="userModel.Email" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="text" name="mobile" placeholder="Mobil" class="email" @bind-Value="userModel.Mobile" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="password" name="password" placeholder="Adgangskode" class="password" @bind-Value="userModel.Password" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="password" name="confirmPassword" placeholder="Bekræft adgangskode" class="password" @bind-Value="userModel.ConfirmPassword" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />
            <InputText type="text" name="address" placeholder="Adresse" class="email" @bind-Value="userModel.Address" autocomplete="off" style="border: 1px solid #999; border-radius: 5px; height:50px; width: 100%; padding:10px;" />
            <br /><br />

            <div class="form-actions">
                <div class="login-text">
                    <p>Har du allerede en konto?<a href="login" class="login-link"> Log ind</a></p>
                </div>
                <button type="submit" class="register-button">Gem</button>
            </div>
        </EditForm>
    </div>

    <!-- Message Section -->
    <div class="message-section" style="display: @(string.IsNullOrEmpty(alertMessage) ? "none" : "block")">
        <p>@alertMessage</p>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public RegisterModel userModel { get; set; } = new RegisterModel();
    public string alertMessage { get; set; }

    private async Task Register_Click()
    {
        alertMessage = "";

        // Validate Name
        if (string.IsNullOrEmpty(userModel.Name))
        {
            alertMessage = "Name is required";
            StateHasChanged();
            return;
        }

        // Validate Email
        if (string.IsNullOrEmpty(userModel.Email))
        {
            alertMessage = "Email is required";
            StateHasChanged();
            return;
        }
        else if (!new EmailAddressAttribute().IsValid(userModel.Email))  // Using built-in validation
        {
            alertMessage = "Invalid email address";
            StateHasChanged();
            return;
        }

        // Validate Mobile
        if (string.IsNullOrEmpty(userModel.Mobile))
        {
            alertMessage = "Mobile number is required";
            StateHasChanged();
            return;
        }

        // Validate Password
        if (string.IsNullOrEmpty(userModel.Password))
        {
            alertMessage = "Password is required";
            StateHasChanged();
            return;
        }

        // Validate Password Length
        if (userModel.Password.Length < 6)
        {
            alertMessage = "Password must be at least 6 characters long";
            StateHasChanged();
            return;
        }

        // Validate Confirm Password
        if (string.IsNullOrEmpty(userModel.ConfirmPassword))
        {
            alertMessage = "Confirm Password is required";
            StateHasChanged();
            return;
        }

        // Check if Password and Confirm Password match
        if (userModel.Password != userModel.ConfirmPassword)
        {
            alertMessage = "Password and confirm password do not match";
            StateHasChanged();
            return;
        }

        // Validate Address
        if (string.IsNullOrEmpty(userModel.Address))
        {
            alertMessage = "Address is required";
            StateHasChanged();
            return;
        }

        // Hash the password
        userModel.Password = ComputeSha256Hash(userModel.Password);

        var result = await webShopAppService.RegisterUser(userModel);

        if (result.user != null)
        {
            // Save user information using SecureStorage
            await sessionStorage.SetAsync("User", result.user);
            await notify.InvokeAsync();
            navManager.NavigateTo("/login");
        }
        else
        {
            if (result.errorMessage.Contains("Email already exists"))
            {
                alertMessage = "Error: The email address already exists";
            }
            else
            {
                alertMessage = $"Error: {result.errorMessage}";
            }
        }
        StateHasChanged();
    }

    private string ComputeSha256Hash(string rawData)
    {
        using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            var builder = new System.Text.StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}
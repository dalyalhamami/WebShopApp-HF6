@page "/mycart"
@using WebShopApp_Blazor.Models
@using WebShopApp_Blazor.Services
@inject IWebShopAppService webShopAppService
@inject NavigationManager navManager;
@inject ProtectedSessionStorage sessionStorage;
@inject AuthenticationStateProvider authenticationStateProvider;

<Header/>

<div class="cart-container">
    @if (@myCart != null && @myCart.Count > 0)
    {
        <h2 class="page-title">Din Indkøbskurv</h2>
        <div class="product-table">
            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>Produkt</th>
                        <th>Pris</th>
                        <th>Antal</th>
                        <th>Subtotal</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var cart in myCart)
                {
                    <tr>
                        <td><img src="@cart.ProductImage" alt="Product Photo" /></td>
                        <td>@cart.ProductName</td>
                        <td><strong>@cart.Price</strong> <span>Kr</span></td>
                        <td><input type="number" @bind="cart.Quantity" min="1" max="@cart.AvailableStock" @onclick="@onQuantityChange" /></td>
                        <td><strong class="subtotal">@(cart.Price * cart.Quantity)</strong> <span>Kr</span></td>
                        <td><a @onclick="(() => RemoveFromCart_Click(cart))">Fjern</a></td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <div class="total-tabel">
            <table>
                <tr>
                    <td>Subtotal</td>
                    <td>@subTotal.00 Kr</td>
                </tr>
                <tr>
                    <td>Fragt omkostninger</td>
                    <td>@shippingCharges.00 Kr</td>
                </tr>
                <tr>
                    <td>Total</td>
                    <td>@finalTotal.00 Kr</td>
                </tr>
                <tr>
                    <td>Address</td>
                    <td>
                        <textarea rows="3" cols="30" name="shippingaddress" @bind="shippingAddress"></textarea>
                    </td>
                </tr>
                <tr>
                    <td>Betalingsmetode</td>
                    <td>@paymentMode</td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <button type="button" value="Checkout" class="checkout-btn" @onclick="@Checkout_Click">Til betaling</button>
                    </td>
                </tr>
            </table>
        </div>
    }
    else
    {
        <div class="empty-cart">
            <img src="./Images/empty-cart.png" />
        </div>
    }
</div>

@if (successPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span></span>
                <button class="custom-close" @onclick="NavigateToMyAccount">&times;</button>
            </div>
            <div class="modal-body">
                <h3>Tak for din bestilling</h3>
                <h5>Vi går straks i gange med at pakke dine varer</h5>
                <p>Din ordrenummer er: <span style="color: coral;">@OnderNumber</span></p>
            </div>
            <div class="modal-footer">
                <input type="button" class="close-btn" value="Close" @onclick="NavigateToMyAccount" />
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public List<CartModel> myCart { get; set; }
    public string shippingAddress { get; set; }
    public string paymentMode { get; set; }
    public int subTotal { get; set; }
    public int shippingCharges { get; set; }
    public int finalTotal { get; set; }
    private UserModel user;
    public bool successPopup = false;
    string OnderNumber = string.Empty;

    protected override Task OnInitializedAsync()
    {
        shippingCharges = 50;
        subTotal = 0;
        paymentMode = "Cash on Delivery";

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var loggedInUser = await sessionStorage.GetAsync<UserModel>("loggedInUser");
            if (loggedInUser.Success)
            {
                user = loggedInUser.Value;
            }
            // To ensure UI is updated after data retrieval
            StateHasChanged();

            var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
            if (result.Success)
            {
                myCart = result.Value;
                foreach (var cartItem in myCart)
                {
                    subTotal = subTotal + (cartItem.Price * cartItem.Quantity);
                }

                if (myCart != null && myCart.Count > 0)
                {
                    shippingAddress = myCart.FirstOrDefault().ShippingAddress;
                }
            }

            finalTotal = subTotal + shippingCharges;
            StateHasChanged();
        }
    }

    private async Task RemoveFromCart_Click(CartModel cartItem)
    {
        myCart.Remove(cartItem);
        await sessionStorage.SetAsync("myCart", myCart);
        onQuantityChange();

        await notify.InvokeAsync();
    }

    private void onQuantityChange()
    {
        finalTotal = 0;
        subTotal = 0;
        foreach (var cartItem in myCart)
        {
            subTotal = subTotal + (cartItem.Price * cartItem.Quantity);
        }
        finalTotal = subTotal + shippingCharges;
    }

    private async Task Checkout_Click()
    {
        if (myCart != null && myCart.Count > 0)
        {
            // Calculate total before updating cart items
            finalTotal = subTotal + shippingCharges;
            myCart.ForEach(item =>
            {
                item.ShippingAddress = shippingAddress;
                item.ShippingCharges = shippingCharges;
                item.SubTotal = subTotal;
                item.Total = finalTotal;
                item.PaymentMode = paymentMode;
                item.UserId = user.Id;
            });
            await sessionStorage.SetAsync("myCart", myCart);

            // Get the orderId from the Checkout service
            var orderId = await webShopAppService.Checkout(myCart);
            if (!string.IsNullOrEmpty(orderId))
            {
                OnderNumber = $"{orderId}";
                ToggleSuccessPopup();
                myCart.Clear();
                await sessionStorage.SetAsync("myCart", myCart);
                await notify.InvokeAsync();
            }
            else
            {
                Console.WriteLine("Checkout failed");
            }
        }
    }


    private void ToggleSuccessPopup()
    {
        successPopup = !successPopup;
    }

    // New method to navigate after closing the modal
    private void NavigateToMyAccount()
    {
        successPopup = false;
        navManager.NavigateTo("/myaccount");
    }
}

